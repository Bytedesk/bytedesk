"use strict"; document.getElementById("app-wrapper").style.display = ""; var options = { fullscreenEl: !1 }; Vue.use(vuePhotoPreview, options); var messages = { en: { title: "Live Chat", contactAgent: "contact agent", typing: "typing...", sendLink: "send link", agentChat: "agent chat", viewFile: "view file", arrived: "arrived", readed: "readed", sending: "sending", error: "error", leaveWord: "leave message", name: "name", inputName: "input name", mobile: "mobile", inputMobile: "input mobile", leaveContent: "leave content", email: "email", inputEmail: "input email", age: "age", inputAge: "input age", job: "job", inputJob: "input job", pleaseRate: "please rate", veryGood: "very good", good: "good", average: "average", notGood: "not good", bad: "very bad", submit: "submit", inviteRate: "invite rate", rateResult: "rated", rate: "rate", rateContent: "rate content", pleaseInput: "please input", rateAgain: "cant rate again", continueChat: "continue", agentCloseThread: "agent close thread", visitorCloseThread: "visitor close thread", autoCloseThread: "system close thread", agentOffline: "agent offline, please leave message", nonWorkingTime: "non working time", postScriptPrefix: "<postScript>:", send: "send", joinQueueThread: "start chat", cancel: "cancel", image: "image", restart: "restart", wrongMobileNum: "wrong mobile number", ageMustBeNum: "age must be number", contentMustNotNull: "content must not be null", contentTooLong: "content too long", wrongWid: "wrong wid", queuing: "queuing, please wait", networkDisconnected: "network disconnected", networkConnected: "network connected", helpfull: "Helpfull", helpless: "Helpless", copySuccess: "Copy Success", requestForm: "Request Form", moreHistory: "More History", video: "Video", file: "File" }, cn: { title: "在线客服", contactAgent: "联系客服", typing: "对方正在输入...", sendLink: "发送链接", agentChat: "人工客服", viewFile: "查看文件", arrived: "送达", readed: "已读", sending: "发送中", error: "错误", leaveWord: "留言", name: "姓名", inputName: "请输入姓名", mobile: "手机号", inputMobile: "请输入手机号", leaveContent: "留言内容", email: "邮箱", inputEmail: "请输入邮箱", age: "年龄", inputAge: "请输入年龄", job: "职业", inputJob: "请输入职业", pleaseRate: "请对我们服务做出评价", veryGood: "非常满意", good: "满意", average: "一般", notGood: "不满意", bad: "非常不满意", submit: "提交", inviteRate: "邀请评价", rateResult: "已评价", rate: "评价", rateContent: "评价内容", pleaseInput: "请简单描述您的问题", rateAgain: "不能重复评价", continueChat: "继续会话", agentCloseThread: "客服关闭会话", visitorCloseThread: "访客关闭会话", autoCloseThread: "长时间没有对话，系统自动关闭会话", agentOffline: "当前无客服在线，请留言", nonWorkingTime: "当前非工作时间，请自助查询或留言", postScriptPrefix: "<附言>:", send: "发送", joinQueueThread: "接入会话", cancel: "取消", image: "图片", restart: "重新开始", wrongMobileNum: "手机号错误", ageMustBeNum: "年龄必须为数字", contentMustNotNull: "消息不能为空", contentTooLong: "消息长度太长，请分多次发送", wrongWid: "siteId或者工作组id错误", queuing: "排队中，请稍后", networkDisconnected: "网络断开", networkConnected: "网络恢复", helpfull: "有帮助", helpless: "没帮助", copySuccess: "复制成功", requestForm: "请求表单", moreHistory: "更多聊天记录", video: "视频", file: "文件" } }, i18n = new VueI18n({ locale: "en", messages: messages }), app = new Vue({ el: "#app", i18n: i18n, name: "chat", data: function () { return { IS_PRODUCTION: !0, HTTP_HOST: "https://h5api.bytedesk.com", STOMP_HOST: "https://h5stomp.bytedesk.com", agentNickname: "", agentAvatar: "https://bytedesk.oss-cn-shenzhen.aliyuncs.com/images2/20230304103316icon-140.png", isInputingVisible: !1, localPreviewContent: "", imageDialogVisible: !1, currentImageUrl: "", currentVoiceUrl: "", inputContent: "", messages: [], realname: "", mobile: "", email: "", age: 0, job: "", content: "", showRealname: !1, showMobile: !1, showEmail: !1, showAge: !1, showJob: !1, showContent: !1, isRated: !1, isInviteRate: !1, rateScore: 5, rateValue: "非常满意", rateContent: "", isLoading: !1, stompClient: "", sessionId: "", preSessionId: "", browseInviteBIid: "", access_token: "", passport: { token: { access_token: "" } }, workGroupWid: "", subDomain: "", client: "web_h5", thread: { id: 0, tid: "", topic: "", type: "", visitor: { uid: "", nickname: "visitor", avatar: "https://chainsnow.oss-cn-shenzhen.aliyuncs.com/avatars/visitor_default_avatar.png" } }, subscribedTopics: [], page: 0, last: !1, type: "workGroup", agentUid: "", selfuser: "0", uid: "", username: "", password: "", nickname: "", avatar: "", token: "bd_kfe_token", isConnected: !1, answers: [], isRobot: !1, isQueuing: !1, isThreadStarted: !1, isThreadClosed: !1, isManulRequestThread: !1, isRequestAgent: !1, leaveMessageTip: "", loadHistory: "0", robotUser: { uid: "", nickname: "", avatar: "" }, postscript: "", showScript: !1, hideNav: !1, isEmbed: !1, backUrl: "", topTip: "", showTopTip: !1, closable: !1, showMessage: !0, showInputBar: !0, showLeaveMessage: !1, showRate: !1, showForm: !1, insertMessage: {}, showInputToolBar: !0, showTransferButton: !1, showPlusButton: !0, showPlusPanel: !1, showSendButton: !1, showRestartPanel: !1, lang: "cn", color: "#ffffff", background: "#007bff", v2robot: "0", loadMoreVisible: !1, loadHistoryTimer: "", sendMessageTimer: "", quickButtonArrow: "↓", showQuickButton: !1, showQuickButtonItem: !0, quickButtons: [], transferWords: [], isWeixinBrowser: !1, isNetworkDisconnected: !1, toucheX: 0, toucheY: 0, timeOutEvent: "", emotionBaseUrl: "https://chainsnow.oss-cn-shenzhen.aliyuncs.com/emojis/gif/", emotionMap: { "[微笑]": "100.gif", "[撇嘴]": "101.gif", "[色]": "102.gif", "[发呆]": "103.gif", "[得意]": "104.gif", "[流泪]": "105.gif", "[害羞]": "106.gif", "[闭嘴]": "107.gif", "[睡]": "108.gif", "[大哭]": "109.gif", "[尴尬]": "110.gif", "[发怒]": "111.gif", "[调皮]": "112.gif", "[呲牙]": "113.gif", "[惊讶]": "114.gif", "[难过]": "115.gif", "[酷]": "116.gif", "[冷汗]": "117.gif", "[抓狂]": "118.gif", "[吐]": "119.gif", "[偷笑]": "120.gif", "[愉快]": "121.gif", "[白眼]": "122.gif", "[傲慢]": "123.gif", "[饥饿]": "124.gif", "[困]": "125.gif", "[惊恐]": "126.gif", "[流汗]": "127.gif", "[憨笑]": "128.gif", "[悠闲]": "129.gif", "[奋斗]": "130.gif", "[咒骂]": "131.gif", "[疑问]": "132.gif", "[嘘]": "133.gif", "[晕]": "134.gif", "[疯了]": "135.gif", "[衰]": "136.gif", "[骷髅]": "137.gif", "[敲打]": "138.gif", "[再见]": "139.gif", "[擦汗]": "140.gif", "[抠鼻]": "141.gif", "[鼓掌]": "142.gif", "[糗大了]": "143.gif", "[坏笑]": "144.gif", "[左哼哼]": "145.gif", "[右哼哼]": "146.gif", "[哈欠]": "147.gif", "[鄙视]": "148.gif", "[委屈]": "149.gif", "[快哭]": "150.gif", "[阴险]": "151.gif", "[亲亲]": "152.gif", "[吓]": "153.gif", "[可怜]": "154.gif", "[菜刀]": "155.gif", "[西瓜]": "156.gif", "[啤酒]": "157.gif", "[篮球]": "158.gif", "[乒乓]": "159.gif", "[咖啡]": "160.gif", "[饭]": "161.gif", "[猪头]": "162.gif", "[玫瑰]": "163.gif", "[凋谢]": "164.gif", "[嘴唇]": "165.gif", "[爱心]": "166.gif", "[心碎]": "167.gif", "[蛋糕]": "168.gif", "[闪电]": "169.gif", "[炸弹]": "170.gif", "[刀]": "171.gif", "[足球]": "172.gif", "[瓢虫]": "173.gif", "[便便]": "174.gif", "[月亮]": "175.gif", "[太阳]": "176.gif", "[礼物]": "177.gif", "[拥抱]": "178.gif", "[强]": "179.gif", "[弱]": "180.gif", "[握手]": "181.gif", "[胜利]": "182.gif", "[抱拳]": "183.gif", "[勾引]": "184.gif", "[拳头]": "185.gif", "[差劲]": "186.gif", "[爱你]": "187.gif", "[No]": "188.gif", "[OK]": "189.gif", "[爱情]": "190.gif", "[飞吻]": "191.gif", "[跳跳]": "192.gif", "[发抖]": "193.gif", "[怄火]": "194.gif", "[转圈]": "195.gif", "[磕头]": "196.gif", "[回头]": "197.gif", "[跳绳]": "198.gif", "[投降]": "199.gif", "[激动]": "201.gif", "[乱舞]": "202.gif", "[献吻]": "203.gif", "[左太极]": "204.gif", "[右太极]": "205.gif" }, emojis: [{ title: "[微笑]", file: "100.gif" }, { title: "[撇嘴]", file: "101.gif" }, { title: "[色]", file: "102.gif" }, { title: "[发呆]", file: "103.gif" }, { title: "[得意]", file: "104.gif" }, { title: "[流泪]", file: "105.gif" }, { title: "[害羞]", file: "106.gif" }, { title: "[闭嘴]", file: "107.gif" }, { title: "[睡]", file: "108.gif" }, { title: "[大哭]", file: "109.gif" }, { title: "[尴尬]", file: "110.gif" }, { title: "[发怒]", file: "111.gif" }, { title: "[调皮]", file: "112.gif" }, { title: "[呲牙]", file: "113.gif" }, { title: "[惊讶]", file: "114.gif" }, { title: "[难过]", file: "115.gif" }, { title: "[酷]", file: "116.gif" }, { title: "[冷汗]", file: "117.gif" }, { title: "[抓狂]", file: "118.gif" }, { title: "[吐]", file: "119.gif" }, { title: "[偷笑]", file: "120.gif" }, { title: "[愉快]", file: "121.gif" }, { title: "[白眼]", file: "122.gif" }, { title: "[傲慢]", file: "123.gif" }, { title: "[饥饿]", file: "124.gif" }, { title: "[困]", file: "125.gif" }, { title: "[惊恐]", file: "126.gif" }, { title: "[流汗]", file: "127.gif" }, { title: "[憨笑]", file: "128.gif" }, { title: "[悠闲]", file: "129.gif" }, { title: "[奋斗]", file: "130.gif" }, { title: "[咒骂]", file: "131.gif" }, { title: "[疑问]", file: "132.gif" }, { title: "[嘘]", file: "133.gif" }, { title: "[晕]", file: "134.gif" }, { title: "[疯了]", file: "135.gif" }, { title: "[衰]", file: "136.gif" }, { title: "[骷髅]", file: "137.gif" }, { title: "[敲打]", file: "138.gif" }, { title: "[再见]", file: "139.gif" }, { title: "[擦汗]", file: "140.gif" }, { title: "[抠鼻]", file: "141.gif" }, { title: "[鼓掌]", file: "142.gif" }, { title: "[糗大了]", file: "143.gif" }, { title: "[坏笑]", file: "144.gif" }, { title: "[左哼哼]", file: "145.gif" }, { title: "[右哼哼]", file: "146.gif" }, { title: "[哈欠]", file: "147.gif" }, { title: "[鄙视]", file: "148.gif" }, { title: "[委屈]", file: "149.gif" }, { title: "[快哭]", file: "150.gif" }, { title: "[阴险]", file: "151.gif" }, { title: "[亲亲]", file: "152.gif" }, { title: "[吓]", file: "153.gif" }] } }, watch: { inputContent: function (e) { e.length > 0 ? (this.showPlusButton = !1, this.showSendButton = !0, this.showTransferButton = !1) : (this.showSendButton = !1, this.isRobot ? this.showTransferButton = !0 : this.showPlusButton = !0), this.isRobot || this.isThreadClosed || (this.localPreviewContent = e, this.delaySendPreviewMessage()) } }, computed: { topTitle: function () { return this.isInputingVisible ? this.$t("typing") : this.agentNickname }, disabled: function () { return "" === this.thread.tid }, sendButtonDisabled: function () { return 0 === this.inputContent.trim().length }, threadTopic: function () { return this.thread.topic.replace(/\//g, ".") }, show_header: function () { return !0 }, connectedImage: function () { return this.isConnected ? "https://bytedesk.oss-cn-shenzhen.aliyuncs.com/util/connected.png" : "https://bytedesk.oss-cn-shenzhen.aliyuncs.com/util/disconnected.png" }, leaveWordTip: function () { return this.$t("leaveWord") }, nameTip: function () { return this.$t("name") }, inputNameTip: function () { return this.$t("inputName") }, mobileTip: function () { return this.$t("mobile") }, inputMobileTip: function () { return this.$t("inputMobile") }, leaveContentTip: function () { return this.$t("leaveContent") }, emailTip: function () { return this.$t("email") }, inputEmailTip: function () { return this.$t("inputEmail") }, ageTip: function () { return this.$t("age") }, inputAgeTip: function () { return this.$t("inputAge") }, jobTip: function () { return this.$t("job") }, inputJobTip: function () { return this.$t("inputJob") }, pleaseRateTip: function () { return this.$t("pleaseRate") }, veryGoodTip: function () { return this.$t("veryGood") }, goodTip: function () { return this.$t("good") }, averageTip: function () { return this.$t("average") }, notGoodTip: function () { return this.$t("notGood") }, badTip: function () { return this.$t("bad") }, pleaseInputTip: function () { return this.$t("pleaseInput") }, rateTip: function () { return this.$t("rate") }, rateContentTip: function () { return this.$t("rateContent") }, postScriptPrefixTip: function () { return this.$t("postScriptPrefix") }, networkDisconnectedTip: function () { return this.$t("networkDisconnected") }, networkConnectedTip: function () { return this.$t("networkConnected") } }, methods: { closePage: function () { window.parent.postMessage("bytedesk-close", "*") }, switchPlusPanel: function () { this.showPlusPanel = !this.showPlusPanel }, switchAgent: function () { this.showLeaveMessage = !1, this.isRobot = !1, this.requestThread() }, switchLeaveMessage: function () { this.showMessage = !1, this.showInputBar = !1, this.showLeaveMessage = !0 }, switchForm: function () { this.showMessage = !1, this.showInputBar = !1, this.showForm = !0 }, switchRate: function () { this.showMessage = !1, this.showInputBar = !1, this.showRate = !0 }, switchMessage: function () { this.showMessage = !0, this.showInputBar = !0, this.showRate = !1, this.showForm = !1, this.showLeaveMessage = !1 }, imageClicked: function (e) { window.open(e) }, fileClicked: function (e) { window.open(e) }, voiceClicked: function (e) { window.open(e) }, videoClicked: function (e) { window.open(e) }, is_self: function (e) { return null != e.user && e.user.uid === this.uid }, is_sending: function (e) { return "sending" === e.status }, is_stored: function (e) { return "stored" === e.status }, is_received: function (e) { return "received" === e.status }, is_error: function (e) { return "error" === e.status }, is_read: function (e) { return "read" === e.status }, can_recall: function (e) { return this.callRecallMessage(e) && this.is_self(e) && ("text" === e.type || "image" === e.type) }, callRecallMessage: function (e) { var t = moment(new Date, "YYYY-MM-DD HH:mm:ss"), i = moment(e.createdAt, "YYYY-MM-DD HH:mm:ss"); return t.diff(i, "seconds") < 180 }, is_type_text: function (e) { return "text" === e.type || "notification_thread" === e.type || "notification_auto_close" === e.type }, is_type_robot: function (e) { return "robot" === e.type }, is_type_robot_v2: function (e) { return "robotv2" === e.type }, is_type_robot_result: function (e) { return "robot_result" === e.type }, is_type_robot_result_not_found: function (e) { return "robot_result_not_found" === e.type }, is_type_image: function (e) { return "image" === e.type }, is_type_file: function (e) { return "file" === e.type }, is_type_voice: function (e) { return "voice" === e.type }, is_type_video: function (e) { return "video" === e.type || "shortvideo" === e.type }, is_type_card: function (e) { return "card" === e.type }, is_type_commodity: function (e) { return "commodity" === e.type }, is_type_questionnaire: function (e) { return "questionnaire" === e.type }, is_type_company: function (e) { return "company" === e.type }, is_type_workGroup: function (e) { return "workGroup" === e.type }, is_type_form_request: function (e) { return "notification_form_request" === e.type }, is_type_form_result: function (e) { return "notification_form_result" === e.type }, is_type_thread: function (e) { return "notification_thread" === e.type }, is_type_close: function (e) { return "notification_auto_close" === e.type || "notification_agent_close" === e.type }, is_type_notification_agent_close: function (e) { return "notification_agent_close" === e.type }, is_type_notification_visitor_close: function (e) { return "notification_visitor_close" === e.type }, is_type_notification_auto_close: function (e) { return "notification_auto_close" === e.type }, is_type_notification_connect: function (e) { return "notification_connect" === e.type }, is_type_notification_disconnect: function (e) { return "notification_disconnect" === e.type }, is_type_notification_thread_reentry: function (e) { return "notification_thread_reentry" === e.type }, is_type_notification_offline: function (e) { return "notification_offline" === e.type }, is_type_notification_non_working_time: function (e) { return "notification_non_working_time" === e.type }, is_type_notification_queue: function (e) { return "notification_queue" === e.type }, is_type_notification_queue_accept: function (e) { return "notification_queue_accept" === e.type }, is_type_notification_invite_rate: function (e) { return "notification_invite_rate" === e.type }, is_type_notification_rate_result: function (e) { return "notification_rate_result" === e.type }, is_type_notification_rate_helpful: function (e) { return "notification_rate_helpful" === e.type }, is_type_notification_rate_helpless: function (e) { return "notification_rate_helpless" === e.type }, is_type_notification: function (e) { return "notification_preview" !== e.type && "notification_thread" !== e.type && "notification_form_request" !== e.type && "notification_form_result" !== e.type && "notification_thread_reentry" !== e.type && "notification_offline" !== e.type && "notification_non_working_time" !== e.type && "notification_queue" !== e.type && e.type.startsWith("notification") || "commodity" === e.type }, my_uid: function () { return this.uid }, my_username: function () { return this.username }, thread_nickname: function () { return this.nickname.trim().length > 0 ? this.nickname : this.thread.visitor.nickname }, my_nickname: function () { return this.nickname.trim().length > 0 ? this.nickname : this.thread.visitor.nickname }, my_avatar: function () { return this.avatar.trim().length > 0 ? this.avatar : this.thread.visitor.avatar }, jsonObject: function (e) { return null === e ? '{"categoryCode":"","content":"","id":"0","imageUrl":"","price":"","title":"","type":"commodity","url":""}' : JSON.parse(e) }, replaceUrl: function (e) { if (!e) return e; var t = /(https?:\/\/|www\.)[a-zA-Z_0-9\-@]+(\.\w[a-zA-Z_0-9\-:]+)+(\/[()~#&\-=?+%\/.\w]+)?/g; return e.replace(t, function (e) { return '<a href="' + e + '" target="_blank">' + e + "</a>" }) }, replaceUrlScheme: function (e) { var t = /(\b[a-z]+:\/\/\S+)/gi; return e.replace(t, '<a href="$1" target="_blank">$1</a>') }, replaceFace: function (e) { if (null === e || void 0 === e) return ""; var t = this.replaceUrlScheme(e), i = this.emotionMap, a = /\[[\u4E00-\u9FA5NoOK]+\]/g, n = t.match(a), s = t; if (n) for (var o = 0; o < n.length; o++)s = s.replace(n[o], "<img height='25px' width='25px' style='margin-bottom:4px;' src='" + this.emotionBaseUrl + i[n[o]] + "'>"); return s }, escapeHTML: function (e) { return e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;") }, handleImageDialogClose: function (e) { e() }, scrollToBottom: function () { var e = this; this.$nextTick(function () { var t = e.$refs.listm; null != t && (t.scrollTop = t.scrollHeight) }) }, onTouchStart: function (e, t) { this.toucheX = t.targetTouches[0].screenX, this.toucheY = t.targetTouches[0].screenY, this.timeOutEvent && clearTimeout(this.timeOutEvent), this.timeOutEvent = setTimeout(function () { app.is_type_text(e) ? app.copyToClip(e.content) : app.is_type_image(e) ? app.copyToClip(e.imageUrl) : app.is_type_file(e) ? app.copyToClip(e.fileUrl) : app.is_type_voice(e) ? app.copyToClip(e.voiceUrl) : app.is_type_video(e) ? app.copyToClip(e.videoOrShortUrl) : app.copyToClip(e.content) }, 500), t.preventDefault() }, onTouchMove: function (e) { var t = e.targetTouches[0].screenX, i = e.targetTouches[0].screenY; this.toucheX === t && this.toucheY === i || this.timeOutEvent && clearTimeout(this.timeOutEvent) }, onTouchEnd: function () { this.timeOutEvent && clearTimeout(this.timeOutEvent) }, copyToClip: function (e) { e = e.replaceAll("amp;", ""); var t = document.createElement("input"); t.setAttribute("value", e), document.body.appendChild(t), t.select(), document.execCommand("copy"), document.body.removeChild(t), app.$toast(this.$t("copySuccess")) }, pushToMessageArray: function (e) { for (var t = !1, i = 0; i < this.messages.length; i++) { this.messages[i].mid === e.mid && (t = !0) } if (t || (this.messages.push(e), this.messages.sort(function (e, t) { return e.createdAt > t.createdAt ? 1 : e.createdAt < t.createdAt ? -1 : 0 })), this.messages.length > 100) localStorage.setItem(this.threadTopic, ""); else { var a = JSON.stringify(this.messages); localStorage.setItem(this.threadTopic, a) } "image" === e.type && app.$previewRefresh() }, getUrlParam: function (e) { var t = new RegExp("(^|&)" + e + "=([^&]*)(&|$)"), i = window.location.search.substr(1).match(t); return null != i ? decodeURIComponent(i[2]) : null }, isWeixin: function () { return !(-1 == navigator.userAgent.toLowerCase().indexOf("micromessenger")) }, requestUsername: function () { this.$indicator.open(), $.ajax({ url: this.HTTP_HOST + "/visitor/api/username", contentType: "application/json; charset=utf-8", type: "get", data: { nickname: this.nickname, avatar: this.avatar, subDomain: this.subDomain, client: this.client }, success: function (e) { console.log("user:", e.data), app.uid = e.data.uid, app.username = e.data.username, app.password = app.username, app.nickname = e.data.nickname, app.avatar = e.data.avatar, localStorage.bd_kfe_uid = app.uid, localStorage.bd_kfe_username = app.username, app.login() }, error: function (e) { console.log(e) } }) }, registerUser: function () { var e = this.getUrlParam("username"), t = null == this.getUrlParam("nickname") ? e : this.getUrlParam("nickname"), i = null === this.getUrlParam("avatar") ? "" : this.getUrlParam("avatar"); this.printLog("username self:" + e + t + i); var a = e; $.ajax({ url: this.HTTP_HOST + "/visitor/api/register/user", contentType: "application/json; charset=utf-8", dataType: "json", type: "post", data: JSON.stringify({ username: e, nickname: t, password: a, avatar: i, subDomain: this.subDomain, client: this.client }), success: function (n) { app.printLog("registerUser success: " + JSON.stringify(n)), 200 === n.status_code ? (app.uid = n.data.uid, app.username = n.data.username, app.password = a, app.nickname = n.data.nickname, app.avatar = n.data.avatar, localStorage.bd_kfe_uid = app.uid, localStorage.bd_kfe_username = app.username, localStorage.bd_kfe_nickname = app.nickname) : (app.uid = n.data, app.username = e + "@" + app.subDomain, app.password = a, app.nickname = t, app.avatar = i, localStorage.bd_kfe_uid = app.uid, localStorage.bd_kfe_username = app.username, localStorage.bd_kfe_nickname = app.nickname), app.login() }, error: function (e) { app.printLog(e) } }) }, getProfile: function (e) { var t = this; $.ajax({ url: this.HTTP_HOST + "/visitor/api/profile", type: "get", data: { uid: e, client: this.client }, success: function (e) { console.log("getProfile: ", e), t.uid = e.data.uid, t.username = e.data.username, t.password = e.data.username, t.nickname = e.data.nickname, t.avatar = e.data.avatar, t.subDomain = e.data.subDomain, t.login() }, error: function (e) { console.log(e) } }) }, login: function () { $.ajax({ url: this.HTTP_HOST + "/visitor/token", type: "post", data: { username: this.username, password: this.password, grant_type: "password", scope: "all" }, beforeSend: function (e) { e.setRequestHeader("Authorization", "Basic Y2xpZW50OnNlY3JldA==") }, success: function (e) { console.log("login success: ", e), localStorage.access_token = e.access_token, localStorage.bd_kfe_access_token = e.access_token, app.requestThread() }, error: function (e) { console.log(e), app.$toast("oauth error: " + e.responseText.toString()) } }) }, isTokenValid: function () { $.ajax({ url: this.HTTP_HOST + "/api/user/token/valide", contentType: "application/json; charset=utf-8", type: "get", data: { client: this.client }, beforeSend: function (e) { e.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (e) { console.log("isTokenValid success:", e) }, error: function (e) { console.log("isTokenValid error:", e), app.login() } }) }, fingerPrint2: function () { var e = DeviceInfo.getDeviceInfo({ domain: "" }), t = window.location.href; t = t.endsWith("#") ? t.substring(0, t.length - 1) : t, $.ajax({ url: this.HTTP_HOST + "/api/fingerprint2/browser", contentType: "application/json; charset=utf-8", dataType: "json", type: "post", data: JSON.stringify({ browserInfo: encodeURI(e.browserInfo), deviceType: encodeURI(e.deviceType), fingerprint: encodeURI(e.fingerprint), language: encodeURI(e.language), os: encodeURI(e.os), osVersion: encodeURI(e.osVersion), referrer: encodeURI(document.referrer), url: encodeURI(t), client: this.client }), beforeSend: function (e) { e.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (e) { console.log("fingerprint2: ", e) }, error: function (e) { console.log(e) } }) }, browse: function () { var e = window.location.href; e = e.endsWith("#") ? e.substring(0, e.length - 1) : e, $.ajax({ url: this.HTTP_HOST + "/api/browse/notify", contentType: "application/json; charset=utf-8", dataType: "json", type: "post", data: JSON.stringify({ client: this.client, sessionId: this.sessionId, referrer: encodeURI(document.referrer), url: encodeURI(e), title: encodeURI(document.title) }), beforeSend: function (e) { e.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (e) { }, error: function (e) { console.log(e), app.login() } }) }, manulRequestThread: function () { this.isManulRequestThread = !0, this.requestThread() }, requestThread: function () { if (this.$indicator.open(), "1" === this.v2robot) return void this.requestWorkGroupThreadV2(); $.ajax({ url: this.HTTP_HOST + "/api/thread/request", contentType: "application/json; charset=utf-8", type: "get", data: { wId: this.workGroupWid, type: this.type, aId: this.agentUid, client: this.client }, beforeSend: function (e) { e.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (e) { if (app.$indicator.close(), app.dealWithThread(e), app.fingerPrint2(), "1" === app.loadHistory) { var t = localStorage.getItem(app.threadTopic); if (null != t && t.length > 0) for (var i = JSON.parse(t), a = i.length, n = 0; n < a; n++) { var s = i[n]; if ("notification_thread_reentry" === s.type) { if (n + 1 < a) { var o = i[n + 1]; if ("notification_thread_reentry" === o.type) continue; app.pushToMessageArray(s) } } else app.pushToMessageArray(s) } } }, error: function (e) { console.log(e), app.login() } }) }, requestWorkGroupThreadV2: function () { $.ajax({ url: this.HTTP_HOST + "/api/v2/thread/workGroup", contentType: "application/json; charset=utf-8", type: "get", data: { wId: this.workGroupWid, client: this.client }, beforeSend: function (e) { e.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (e) { app.$indicator.close(), app.dealWithThread(e) }, error: function (e) { console.log(e), app.login() } }) }, requestAgent: function () { this.$indicator.open(), this.isRequestAgent = !0, $.ajax({ url: this.HTTP_HOST + "/api/thread/request/agent", contentType: "application/json; charset=utf-8", type: "get", data: { wId: this.workGroupWid, type: this.type, aId: this.agentUid, client: this.client }, beforeSend: function (e) { e.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (e) { app.$indicator.close(), app.dealWithThread(e), app.fingerPrint2() }, error: function (e) { console.log(e), app.login() } }) }, dealWithThread: function (e) { var t = e.data; this.insertMessage = t, 200 === e.status_code ? (app.pushToMessageArray(t), app.thread = t.thread, app.loadHistoryMessagesByTopic(app.thread.topic), app.thread.appointed ? (app.agentNickname = app.thread.agent.nickname, app.agentAvatar = app.thread.agent.avatar) : (app.agentNickname = app.thread.workGroup.nickname, app.agentAvatar = t.user.avatar), app.isRobot = !1, app.showTransferButton = !1, app.showPlusButton = !0, app.robotUser = t.user, app.isThreadClosed = !1, app.appendCommodityInfo(), app.getQuickButtons()) : 201 === e.status_code ? (app.pushToMessageArray(t), app.thread = t.thread, app.loadHistoryMessagesByTopic(app.thread.topic), app.thread.appointed ? (app.agentNickname = app.thread.agent.nickname, app.agentAvatar = app.thread.agent.avatar) : (app.agentNickname = app.thread.workGroup.nickname, app.agentAvatar = t.user.avatar), app.isRobot = !1, app.showTransferButton = !1, app.showPlusButton = !0, app.robotUser = t.user, app.isThreadClosed = !1, app.appendCommodityInfo(), app.getQuickButtons()) : 202 === e.status_code ? (app.pushToMessageArray(t), app.thread = t.thread, app.isQueuing = !0, app.thread.appointed ? (app.agentNickname = app.thread.agent.nickname, app.agentAvatar = app.thread.agent.avatar) : (app.agentNickname = app.thread.workGroup.nickname, app.agentAvatar = t.user.avatar)) : 203 === e.status_code ? (app.pushToMessageArray(t), app.leaveMessageTip = t.content, app.thread = t.thread, app.thread.appointed ? (app.agentNickname = app.thread.agent.nickname, app.agentAvatar = app.thread.agent.avatar) : (app.agentNickname = app.thread.workGroup.nickname, app.agentAvatar = t.user.avatar), app.loadHistoryMessagesByTopic(app.thread.topic), "form" === t.sessionType ? app.switchLeaveMessage() : console.log("聊天页面留言")) : 204 === e.status_code ? (app.pushToMessageArray(t), app.leaveMessageTip = t.content, app.thread = t.thread, app.thread.appointed ? (app.agentNickname = app.thread.agent.nickname, app.agentAvatar = app.thread.agent.avatar) : (app.agentNickname = app.thread.workGroup.nickname, app.agentAvatar = t.user.avatar), app.loadHistoryMessagesByTopic(app.thread.topic), "form" === t.sessionType ? app.switchLeaveMessage() : console.log("聊天页面留言")) : 205 === e.status_code ? (app.pushToMessageArray(t), app.thread = t.thread) : 206 === e.status_code ? (app.pushToMessageArray(t), app.thread = t.thread, app.loadHistoryMessagesByTopic(app.thread.topic), app.thread.appointed ? (app.agentNickname = app.thread.agent.nickname, app.agentAvatar = app.thread.agent.avatar) : (app.agentNickname = app.thread.workGroup.nickname, app.agentAvatar = t.user.avatar), app.isRobot = !0, app.showTransferButton = !0, app.showPlusButton = !1, app.robotUser = t.user, app.getQuickButtons(), app.getTransferWords()) : -1 === e.status_code ? app.login() : -2 === e.status_code ? app.$toast(this.$t("wrongWid")) : -3 === e.status_code ? app.$toast("未知错误") : -4 === e.status_code ? app.$toast("系统流量过大，请稍后再试") : e.status_code, document.title = app.agentNickname, app.scrollToBottom(), app.byteDeskConnect() }, rate: function () { if (this.switchMessage(), app.isRated) return void app.$toast(this.$t("rateAgain")); this.rateValue === this.veryGoodTip ? this.rateScore = 5 : this.rateValue === this.goodTip ? this.rateScore = 4 : this.rateValue === this.averageTip ? this.rateScore = 3 : this.rateValue === this.notGoodTip ? this.rateScore = 2 : this.rateValue === this.badTip && (this.rateScore = 1), $.ajax({ url: this.HTTP_HOST + "/api/rate/do", contentType: "application/json; charset=utf-8", dataType: "json", type: "post", data: JSON.stringify({ tid: this.thread.tid, score: this.rateScore, note: this.rateContent, invite: this.isInviteRate, client: this.client }), beforeSend: function (e) { e.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (e) { app.isRated = !0 }, error: function (e) { console.log(e), app.login() } }) }, loadMoreMessages: function () { this.page += 1, app.loadHistoryMessagesByTopic(app.thread.topic) }, loadHistoryMessagesByTopic: function (e) { this.isRequestAgent || this.isManulRequestThread || "0" === this.loadHistory || $.ajax({ url: this.HTTP_HOST + "/api/messages/topic", type: "get", data: { topic: e, page: this.page, size: 10, client: this.client }, beforeSend: function (e) { e.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (e) { console.log("loadHistoryMessagesByTopic: ", e), 200 === e.status_code ? (app.loadMoreVisible = !e.data.last, app.dealWithHistoryMessages(e)) : "1" === app.loadHistory && app.pushToMessageArray(app.insertMessage), app.$previewRefresh() }, error: function (e) { console.log(e), app.login() } }) }, loadLatestMessage: function () { var e = app.loadHistory ? 10 : 1; $.ajax({ url: this.HTTP_HOST + "/api/messages/topic", type: "get", data: { topic: app.thread.topic, page: 0, size: e, client: this.client }, beforeSend: function (e) { e.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (e) { 200 === e.status_code && app.dealWithHistoryMessages(e), app.scrollToBottom(), app.$previewRefresh() }, error: function (e) { console.log(e), app.login() } }) }, loadMessagesUnread: function () { app.isConnected || app.isRobot || $.ajax({ url: this.HTTP_HOST + "/api/messages/unread/message/visitor/schedule", type: "get", data: { page: 0, size: 10, client: this.client }, beforeSend: function (e) { e.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (e) { 200 === e.status_code && app.dealWithHistoryMessages(e), app.scrollToBottom(), app.$previewRefresh() }, error: function (e) { console.log(e), app.login() } }) }, dealWithHistoryMessages: function (e) { for (var t = 0; t < e.data.content.length; t++) { var i = e.data.content[t]; if ("notification_thread_reentry" === i.type) { if (t + 1 < length) { var a = e.data.content[t + 1]; if ("notification_thread_reentry" === a.type) continue; app.pushToMessageArray(i) } } else app.pushToMessageArray(i) } }, appendQueryMessage: function (e) { var t = { mid: this.guid(), timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "robot", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar(), extra: { agent: !1 } }, text: { content: e }, answers: [], thread: { tid: this.thread.tid, type: this.thread.type, content: e, nickname: this.thread_nickname(), avatar: this.thread.visitor.avatar, topic: this.threadTopic, client: this.client, timestamp: this.currentTimestamp(), unreadCount: 0 } }; this.onMessageReceived(t) }, appendReplyMessage: function (e, t, i) { var a = { mid: t, timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "robot_result", user: { uid: this.robotUser.uid, nickname: this.robotUser.nickname, avatar: this.robotUser.avatar, extra: { agent: !0 } }, text: { content: i }, answer: { aid: e }, answers: [], thread: { tid: this.thread.tid, type: this.thread.type, content: i, nickname: this.thread_nickname(), avatar: this.thread.visitor.avatar, topic: this.threadTopic, client: this.client, timestamp: this.currentTimestamp(), unreadCount: 0 } }; this.onMessageReceived(a) }, queryAnswer: function (e) { this.appendQueryMessage(e.question); var t = this.guid(); this.appendReplyMessage(e.aid, t, e.answer), $.ajax({ url: this.HTTP_HOST + "/api/v2/answer/query", contentType: "application/json; charset=utf-8", type: "get", data: { tid: this.thread.tid, aid: e.aid, mid: t, client: this.client }, beforeSend: function (e) { e.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (e) { console.log("query answer success:", e), 200 === e.status_code || app.$toast(e.message) }, error: function (e) { console.log("query answers error:", e), app.login() } }) }, queryCategory: function (e) { console.log("category:", e), this.appendQueryMessage(e.name), $.ajax({ url: this.HTTP_HOST + "/api/v2/answer/category", contentType: "application/json; charset=utf-8", type: "get", data: { tid: this.thread.tid, cid: e.cid, client: this.client }, beforeSend: function (e) { e.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (e) { if (200 === e.status_code) { var t = e.data.reply; app.pushToMessageArray(t), app.scrollToBottom() } else app.$toast(e.message) }, error: function (e) { console.log("query answers error:", e), app.login() } }) }, messageAnswer: function (e) { if (this.appendQueryMessage(e), -1 !== e.indexOf("人工")) return void app.requestAgent(); for (var t = 0; t < this.transferWords.length; t++) { var i = this.transferWords[t]; if ("contains" === i.type) { if (-1 !== e.indexOf(i.content)) return void app.requestAgent() } else if ("match" === i.type && e === i.content) return void app.requestAgent() } $.ajax({ url: this.HTTP_HOST + "/api/elastic/robot/message", contentType: "application/json; charset=utf-8", type: "get", data: { wid: this.workGroupWid, content: e, client: this.client }, beforeSend: function (e) { e.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (e) { if (console.log("message answer success:", e), 200 === e.status_code) { var t = e.data.reply; t.type = "robot_result", app.pushToMessageArray(t), app.scrollToBottom() } else if (201 === e.status_code) { var i = e.data.reply; i.type = "robot_result_not_found", app.pushToMessageArray(i), app.scrollToBottom() } else app.$toast(e.data.message) }, error: function (e) { console.log("query answers error:", e), app.login() } }) }, rateAnswerHelpful: function (e, t) { $.ajax({ url: this.HTTP_HOST + "/api/answer/rate", contentType: "application/json; charset=utf-8", dataType: "json", type: "post", data: JSON.stringify({ aid: e, mid: t, rate: !0, client: this.client }), beforeSend: function (e) { e.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (e) { if (200 === e.status_code) { var t = e.data; app.pushToMessageArray(t), app.scrollToBottom() } else app.$toast(e.message) }, error: function (e) { console.log(e), app.login() } }) }, rateAnswerHelpless: function (e, t) { $.ajax({ url: this.HTTP_HOST + "/api/answer/rate", contentType: "application/json; charset=utf-8", dataType: "json", type: "post", data: JSON.stringify({ aid: e, mid: t, rate: !1, client: this.client }), beforeSend: function (e) { e.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (e) { if (200 === e.status_code) { var t = e.data; app.pushToMessageArray(t), app.scrollToBottom() } else app.$toast(e.message) }, error: function (e) { console.log(e), app.login() } }) }, switchQuickButtonItems: function () { this.showQuickButtonItem = !this.showQuickButtonItem, this.showQuickButtonItem ? this.quickButtonArrow = "↓" : this.quickButtonArrow = "↑" }, quickButtonItemClicked: function (e) { if ("url" === e.type) window.open(e.content); else { var t = this.guid(), i = { mid: t, type: "text", content: e.title, createdAt: this.currentTimestamp(), localId: t, status: "stored", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar() } }; this.pushToMessageArray(i); var a = this.guid(), n = { mid: a, type: "text", content: e.content, createdAt: this.currentTimestamp(), localId: t, status: "stored", user: { uid: "", username: "", nickname: "系统", avatar: "https://chainsnow.oss-cn-shenzhen.aliyuncs.com/avatars/admin_default_avatar.png" } }; this.pushToMessageArray(n), this.scrollToBottom() } }, getQuickButtons: function () { "workGroup" === this.type && $.ajax({ url: this.HTTP_HOST + "/api/quickbutton/query/workGroup", contentType: "application/json; charset=utf-8", type: "get", data: { wid: this.workGroupWid, client: this.client }, beforeSend: function (e) { e.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (e) { e.data.length > 0 && (app.showQuickButton = !0), app.quickButtons = e.data }, error: function (e) { console.log("getQuickButtons error:", e), app.login() } }) }, getTransferWords: function () { "workGroup" === this.type && $.ajax({ url: this.HTTP_HOST + "/api/transferword/query/workGroup", contentType: "application/json; charset=utf-8", type: "get", data: { wid: this.workGroupWid, client: this.client }, beforeSend: function (e) { e.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (e) { console.log("getTransferWords success:", e), app.transferWords = e.data }, error: function (e) { console.log("getTransferWords error:", e), app.login() } }) }, getPrechatSettings: function () { "workGroup" === this.type && $.ajax({ url: this.HTTP_HOST + "/visitor/api/prechat/settings", contentType: "application/json; charset=utf-8", type: "get", data: { wid: this.workGroupWid, client: this.client }, success: function (e) { 200 === e.status_code && (app.showTopTip = e.data.showTopTip, app.topTip = e.data.topTip, e.data.showForm && (app.showRealname = !0, app.showMobile = !0, app.switchForm())) }, error: function (e) { console.log("fetch pre setting error:", e), app.login() } }) }, leaveMessage: function () { return 11 !== this.mobile.trim().length ? void this.$toast("手机号错误") : 0 === this.content.trim().length ? void this.$toast("留言内容不能为空") : (this.switchMessage(), void $.ajax({ url: this.HTTP_HOST + "/api/leavemsg/save", contentType: "application/json; charset=utf-8", dataType: "json", type: "post", data: JSON.stringify({ wid: this.workGroupWid, aid: this.agentUid, type: this.type, mobile: this.mobile, email: "", content: this.content, client: this.client }), beforeSend: function (e) { e.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (e) { 200 === e.status_code ? (app.sendTextMessageSync(app.mobile + ":" + app.content), app.$toast("留言成功")) : app.$toast(e.message) }, error: function (e) { console.log(e), app.$toast("留言失败"), app.login() } })) }, currentTimestamp: function () { var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : +new Date; return new Date(e + 288e5).toJSON().substr(0, 19).replace("T", " ") }, guid: function () { function e() { return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1) } return moment(new Date).format("YYYYMMDDHHmmss") + e() + e() + e() + e() + e() + e() + e() + e() }, timeUuid: function () { return moment(new Date).format("YYYYMMDDHHmmss") }, cancelForm: function () { this.switchMessage() }, submitForm: function () { var e = JSON.stringify({ form: { realname: this.realname, mobile: this.mobile, email: this.email, age: this.age, job: this.job } }); if (this.mobile.length > 0 && 11 !== this.mobile.length) return void app.$toast(this.$t("wrongMobileNum")); if (this.age.length > 0 && isNaN(this.age)) return void app.$toast(this.$t("ageMustBeNum")); var t = { mid: this.guid(), timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "notification_form_result", status: "stored", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar() }, form: { content: e }, thread: { tid: this.thread.tid, type: this.thread.type, content: "[表单]", nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: this.currentTimestamp(), unreadCount: 0 } }; this.doSendMessage(t), this.switchMessage(), this.showRealname = !1, this.showMobile = !1, this.showEmail = !1, this.showAge = !1, this.showJob = !1 }, sendTextMessageSync: function (e) { e = this.escapeHTML(e); var t = this.currentTimestamp(), i = { mid: this.guid(), timestamp: t, client: this.client, version: "1", type: "text", status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar(), extra: { agent: !1 } }, text: { content: e }, thread: { tid: this.thread.tid, type: this.thread.type, content: e, nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: t, unreadCount: 0 } }; this.doSendMessage(i) }, sendImageMessage: function (e) { var t = this.currentTimestamp(), i = { mid: this.guid(), timestamp: t, client: this.client, version: "1", type: "image", status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar(), extra: { agent: !1 } }, image: { imageUrl: e }, thread: { tid: this.thread.tid, type: this.thread.type, content: "[图片]", nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: t, unreadCount: 0 } }; this.doSendMessage(i) }, sendVoiceMessage: function (e) { var t = this.currentTimestamp(), i = { mid: this.guid(), timestamp: t, client: this.client, version: "1", type: "voice", status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar(), extra: { agent: !1 } }, voice: { voiceUrl: e, length: "0", format: "wav" }, thread: { tid: this.thread.tid, type: this.thread.type, content: "[语音]", nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: t, unreadCount: 0 } }; this.doSendMessage(i) }, sendVideoMessage: function (e) { var t = this.currentTimestamp(), i = { mid: this.guid(), timestamp: t, client: this.client, version: "1", type: "video", status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar(), extra: { agent: !1 } }, video: { videoOrShortUrl: e }, thread: { tid: this.thread.tid, type: this.thread.type, content: "[视频]", nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: t, unreadCount: 0 } }; this.doSendMessage(i) }, sendFileMessage: function (e) { var t = this.currentTimestamp(), i = { mid: this.guid(), timestamp: t, client: this.client, version: "1", type: "file", status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar(), extra: { agent: !1 } }, file: { fileUrl: e }, thread: { tid: this.thread.tid, type: this.thread.type, content: "[文件]", nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: t, unreadCount: 0 } }; this.doSendMessage(i) }, sendCommodityMessageSync: function () { if ("1" === this.getUrlParam("goods")) { var e = this.commodityInfo(), t = { mid: this.guid(), timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "commodity", status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar(), extra: { agent: !1 } }, text: { content: e }, thread: { tid: this.thread.tid, type: this.thread.type, content: "[商品]", nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: this.currentTimestamp(), unreadCount: 0 } }; this.doSendMessage(t) } }, appendCommodityInfo: function () { if ("1" === this.getUrlParam("goods")) { var e = this.commodityInfo(), t = { mid: this.guid(), timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "commodity", status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar(), extra: { agent: !1 } }, content: e, thread: { tid: this.thread.tid, type: this.thread.type, content: "[商品]", nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: this.currentTimestamp(), unreadCount: 0 } }; app.pushToMessageArray(t) } }, commodityInfo: function () { var e = { id: this.getUrlParam("goods_id"), title: this.getUrlParam("goods_title"), content: this.getUrlParam("goods_content"), price: this.getUrlParam("goods_price"), url: this.getUrlParam("goods_url"), imageUrl: this.getUrlParam("goods_imageUrl"), categoryCode: this.getUrlParam("goods_categoryCode"), type: "commodity" }; return JSON.stringify(e) }, subscribeTopic: function (e) { this.subscribedTopics.includes(e) || (this.subscribedTopics.push(e), this.stompClient.subscribe("/topic/" + e, function (e) { var t = JSON.parse(e.body); app.onMessageReceived(t) })) }, onMessageReceived: function (e) { if ("text" === e.type || "robot" === e.type || "robot_result" === e.type || "image" === e.type || "file" === e.type || "voice" === e.type || "video" === e.type || "commodity" === e.type || "card" === e.type || "choice" === e.type) { e.createdAt = e.timestamp, "text" === e.type ? e.content = e.text.content : "robot" === e.type ? e.content = e.text.content : "robot_result" === e.type ? e.content = e.text.content : "image" === e.type ? e.imageUrl = e.image.imageUrl : "file" === e.type ? e.fileUrl = e.file.fileUrl : "voice" === e.type ? (e.voiceUrl = e.voice.voiceUrl, e.length = e.voice.length) : "video" === e.type ? e.videoOrShortUrl = e.video.videoOrShortUrl : "commodity" === e.type ? e.content = e.text.content : "card" === e.type ? e.content = e.text.content : "choice" === e.type && (e.content = e.text.content); var t = e.mid; if (e.user.uid !== app.uid && "robot" != e.type && "robot_result" !== e.type) app.sendReceiptMessage(t, "read"); else for (var i = app.messages.length - 1; i >= 0; i--) { var a = app.messages[i]; if (a.mid === t) { "sending" === app.messages[i].status && Vue.set(app.messages[i], "status", "stored"); break } } } else if ("notification_browse_invite" === e.type); else if ("notification_queue" === e.type) app.isThreadClosed = !1, app.isQueuing = !0; else if ("notification_queue_accept" === e.type) e.createdAt = e.timestamp, e.content = e.text.content, app.isThreadClosed = !1, app.isQueuing = !1, app.isRobot = !1, app.showTransferButton = !1, app.showPlusButton = !0; else if ("notification_invite_rate" === e.type) e.createdAt = e.timestamp, e.content = e.extra.content, app.isInviteRate = !0, app.switchRate(); else if ("notification_rate_result" === e.type) e.createdAt = e.timestamp, e.content = e.extra.content; else if ("notification_agent_close" === e.type || "notification_auto_close" === e.type) e.createdAt = e.timestamp, e.content = e.text.content, app.isThreadClosed = !0; else if ("notification_preview" === e.type) e.user.uid !== app.uid && (app.isInputingVisible = !0, setTimeout(function () { app.isInputingVisible = !1 }, 2e3)); else if ("notification_receipt" === e.type) { if (e.user.uid !== app.uid) for (var n = app.messages.length - 1; n >= 0; n--) { var s = app.messages[n]; if (s.mid === e.receipt.mid) { if ("read" === app.messages[n].status) return; Vue.set(app.messages[n], "status", e.receipt.status) } } } else if ("notification_recall" === e.type) for (var o = 0; o < app.messages.length; o++) { var r = app.messages[o]; r.mid === e.recall.mid && app.messages.splice(o, 1) } else if ("notification_form_request" === e.type) { e.content = "表单请求"; var p = e.extra.content; console.log("form:" + p), -1 !== p.indexOf("姓名") && (console.log("showRealname"), app.showRealname = !0), -1 !== p.indexOf("手机") && (app.showMobile = !0), -1 !== p.indexOf("邮箱") && (app.showEmail = !0), -1 !== p.indexOf("年龄") && (app.showAge = !0), -1 !== p.indexOf("职业") && (app.showJob = !0), app.switchForm() } else "notification_form_result" === e.type && (e.createdAt = e.timestamp, e.content = e.form.content); "notification_preview" !== e.type && "notification_receipt" !== e.type && "notification_recall" !== e.type && "notification_connect" !== e.type && "notification_disconnect" !== e.type && ("text" === e.type ? (null != e.content && !e.content.startsWith(app.postScriptPrefixTip) || app.showScript) && app.pushToMessageArray(e) : app.pushToMessageArray(e), app.scrollToBottom()) }, onInputChange: function (e) { this.isRobot || this.isThreadClosed || (this.localPreviewContent = e, this.delaySendPreviewMessage()) }, sendPreviewMessage: function () { var e = { mid: this.guid(), timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "notification_preview", status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar() }, preview: { content: void 0 === this.localPreviewContent ? " " : this.localPreviewContent }, thread: { tid: this.thread.tid, type: this.thread.type, content: this.localPreviewContent, nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: this.currentTimestamp(), unreadCount: 0 } }; this.doSendMessage(e) }, onKeyUp: function (e) { 13 === e.keyCode && this.inputContent.trim().length > 0 && (this.inputContent = this.inputContent.trim(), this.sendTextMessage()) }, sendTextMessage: function () { if (0 === this.inputContent.trim().length) return void app.$toast(this.$t("contentMustNotNull")); if (this.inputContent.trim().length > 500) return void app.$toast(this.$t("contentTooLong")); if (this.isRobot) this.messageAnswer(this.inputContent); else { if (app.isQueuing) return void app.$toast(this.$t("queuing")); this.sendTextMessageSync(this.inputContent) } this.inputContent = "", setTimeout(function () { $("input")[1].focus() }, 100) }, sendReceiptMessage: function (e, t) { var i = { mid: this.guid(), timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "notification_receipt", status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar() }, receipt: { mid: e, status: t }, thread: { tid: this.thread.tid, type: this.thread.type, nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, timestamp: this.currentTimestamp(), unreadCount: 0 } }; this.doSendMessage(i) }, sendRecallMessage: function (e) { var t = { mid: this.guid(), timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "notification_recall", status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar() }, recall: { mid: e }, thread: { tid: this.thread.tid, type: this.thread.type, nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, timestamp: this.currentTimestamp(), unreadCount: 0 } }; this.doSendMessage(t) }, sendMessageJsonRest: function (e, t, i) { var a, n = this.currentTimestamp(); "text" === t ? a = { mid: e, timestamp: n, client: this.client, version: "1", type: t, status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar(), extra: { agent: !1 } }, text: { content: i }, thread: { tid: this.thread.tid, type: this.thread.type, content: i, nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: n, unreadCount: 0 } } : "image" === t ? a = { mid: e, timestamp: n, client: this.client, version: "1", type: t, status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar(), extra: { agent: !1 } }, image: { imageUrl: i }, thread: { tid: this.thread.tid, type: this.thread.type, content: "图片", nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: n, unreadCount: 0 } } : "file" === t ? a = { mid: e, timestamp: n, client: this.client, version: "1", type: t, status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar(), extra: { agent: !1 } }, file: { fileUrl: i }, thread: { tid: this.thread.tid, type: this.thread.type, content: "[文件]", nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: n, unreadCount: 0 } } : "voice" === t ? a = { mid: e, timestamp: n, client: this.client, version: "1", type: t, status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar(), extra: { agent: !1 } }, voice: { voiceUrl: i, length: "0", format: "wav" }, thread: { tid: this.thread.tid, type: this.thread.type, content: "[语音]", nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: n, unreadCount: 0 } } : "video" === t ? a = { mid: e, timestamp: n, client: this.client, version: "1", type: t, status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar(), extra: { agent: !1 } }, video: { videoOrShortUrl: i }, thread: { tid: this.thread.tid, type: this.thread.type, content: "[视频]", nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: n, unreadCount: 0 } } : "commodidy" === t && (a = { mid: e, timestamp: n, client: this.client, version: "1", type: t, status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar(), extra: { agent: !1 } }, text: { content: i }, thread: { tid: this.thread.tid, type: this.thread.type, content: "[商品]", nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: n, unreadCount: 0 } }), this.sendMessageRest2(e, JSON.stringify(a)) }, doSendMessage: function (e) { app.isConnected ? app.stompClient.send("/app/" + this.threadTopic, {}, JSON.stringify(e)) : app.sendMessageRest(JSON.stringify(e)), this.onMessageReceived(e) }, sendMessageRest: function (e) { app.isNetworkDisconnected && app.$toast(this.networkDisconnectedTip), $.ajax({ url: this.HTTP_HOST + "/api/messages/send", contentType: "application/json; charset=utf-8", dataType: "json", type: "post", data: JSON.stringify({ json: e }), beforeSend: function (e) { e.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (e) { for (var t = JSON.parse(e.data), i = app.messages.length - 1; i >= 0; i--) { if (app.messages[i].mid === t.mid) { if ("read" === app.messages[i].status || "received" === app.messages[i].status) return; return void Vue.set(app.messages[i], "status", "stored") } } }, error: function (e) { console.log(e), app.login() } }) }, sendMessageRest2: function (e, t) { app.isNetworkDisconnected && app.$toast(this.networkDisconnectedTip), $.ajax({ url: this.HTTP_HOST + "/api/messages/send", contentType: "application/json; charset=utf-8", dataType: "json", type: "post", data: JSON.stringify({ json: t }), beforeSend: function (e) { e.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (t) { for (var i = app.messages.length - 1; i >= 0; i--) { if (app.messages[i].mid === e) { if ("read" === app.messages[i].status || "received" === app.messages[i].status) return; return void Vue.set(app.messages[i], "status", "stored") } } }, error: function (e) { console.log(e), app.login() } }) }, resendButtonClicked: function (e) { var t = ""; if ("text" === e.type) t = e.content; else if ("image" === e.type) t = e.imageUrl; else if ("file" === e.type) t = e.fileUrl; else if ("voice" === e.type) t = e.voiceUrl; else if ("video" === e.type) t = e.videoOrShortUrl; else { if ("commodity" !== e.type) return; t = e.content } this.sendMessageJsonRest(e.mid, e.type, t) }, recallButtonClicked: function (e) { this.$messagebox.confirm("确定要撤回消息?").then(function (t) { console.log("撤回:", t), "confirm" === t && app.sendRecallMessage(e.mid) }) }, checkTimeoutMessage: function () { for (var e = 0; e < this.messages.length; e++) { var t = this.messages[e]; if (this.is_self(t) && this.is_sending(t)) { var i = moment(t.createdAt), a = moment(new Date), n = a.diff(i, "seconds"); n > 15 ? Vue.set(this.messages[e], "status", "error") : n > 3 && this.resendButtonClicked(t) } } }, byteDeskConnect: function () { var e = new SockJS(this.STOMP_HOST + "/stomp/?access_token=" + localStorage.bd_kfe_access_token); this.stompClient = Stomp.over(e), this.stompClient.reconnect_delay = 1e3, this.stompClient.heartbeat.outgoing = 2e4, this.stompClient.heartbeat.incoming = 2e4, this.IS_PRODUCTION && (this.stompClient.debug = function (e) { }), this.stompClient.connect({}, function (e) { if (app.isConnected = !0, null !== app.thread.tid && void 0 !== app.thread.tid && "" !== app.thread.tid && app.subscribeTopic(app.threadTopic), null !== app.postscript && void 0 !== app.postscript && "" !== app.postscript) { var t = app.postScriptPrefixTip + app.postscript; app.sendTextMessageSync(t) } app.getPrechatSettings() }, function (e) { console.log("连接断开【" + e + "】"), app.isConnected = !1, app.subscribedTopics = [], setTimeout(function () { console.log("reconnecting..."), app.byteDeskConnect() }, 5e3) }) }, printLog: function (e) { this.IS_PRODUCTION || console.log(e) }, uploadImageButtonClicked: function () { $("input[id=imagefile]").click() }, uploadImage: function () { var e = $("input[id=imagefile]")[0].files[0]; this.uploadImage2(e) }, uploadImage2: function (e) { this.compressImage(e, function (t) { var i = app.timeUuid() + "_" + app.username + "_" + e.name, a = new FormData; a.append("file_name", i), a.append("username", app.username), a.append("file", t), a.append("client", app.client), $.ajax({ url: app.HTTP_HOST + "/visitor/api/upload/image", contentType: !1, cache: !1, processData: !1, mimeTypes: "multipart/form-data", type: "post", data: a, success: function (e) { app.printLog("upload response:" + JSON.stringify(e.data)); var t = e.data; app.sendImageMessage(t) }, error: function (e) { app.printLog(e), app.login() } }) }) }, uploadVideoButtonClicked: function () { console.log("click upload video button"), $("input[id=videofile]").click() }, uploadVideo: function () { var e = $("input[id=videofile]")[0].files[0]; console.log("uploadVideo:", e); var t = app.timeUuid() + "_" + app.username + "_" + e.name, i = new FormData; i.append("file_name", t), i.append("username", app.username), i.append("file", e), i.append("client", app.client), $.ajax({ url: app.HTTP_HOST + "/visitor/api/upload/video", contentType: !1, cache: !1, processData: !1, mimeTypes: "multipart/form-data", type: "post", data: i, success: function (e) { app.printLog("upload video response:" + JSON.stringify(e.data)); var t = e.data; app.sendVideoMessage(t) }, error: function (e) { app.printLog(e) } }) }, uploadFileButtonClicked: function () { console.log("click upload file button"), $("input[id=filefile]").click() }, uploadFile: function () { var e = $("input[id=filefile]")[0].files[0]; console.log("uploadFile:", e); var t = app.timeUuid() + "_" + app.username + "_" + e.name, i = new FormData; i.append("file_name", t), i.append("username", app.username), i.append("file", e), i.append("client", app.client), $.ajax({ url: app.HTTP_HOST + "/visitor/api/upload/file", contentType: !1, cache: !1, processData: !1, mimeTypes: "multipart/form-data", type: "post", data: i, success: function (t) { app.printLog("upload response:" + JSON.stringify(t.data)); var i = t.data; e.type.startsWith("image") ? app.sendImageMessage(i) : e.type.startsWith("audio") ? app.sendVoiceMessage(i) : e.type.startsWith("video") ? app.sendVideoMessage(i) : app.sendFileMessage(i) }, error: function (e) { app.printLog(e) } }) }, compressImage: function (e, t) { if (!(e.size > 1048576)) return app.printLog("图片小于1M直接上传"), t(e); app.printLog("图片大于1M进行压缩"), app.canvasDataURL(e, function (i) { var a = new File([i], e.name, { type: e.type }); e.size < a.size ? e.size : a.size, app.printLog("file.size:" + e.size / 1024 / 1024), app.printLog("newFile.size: " + a.size / 1024 / 1024), e.size < a.size && t(e), t(a) }) }, canvasDataURL: function (e, t) { this.printLog("canvasDataURL"); var i = new FileReader; i.readAsDataURL(e), i.onload = function (e) { var i = new Image, a = document.createElement("canvas"), n = a.getContext("2d"); i.src = this.result, i.onload = function () { return a.width = i.width, a.height = i.height, n.drawImage(i, 0, 0, a.width, a.height), app.convertBase64UrlToBlob(a.toDataURL("image/jpeg", .3), t) } } }, convertBase64UrlToBlob: function (e, t) { this.printLog("convertBase64UrlToBlob"); for (var i = window.atob(e.split(",")[1]), a = new ArrayBuffer(i.length), n = new Uint8Array(a), s = 0; s < i.length; s++)n[s] = i.charCodeAt(s); t(new Blob([a], { type: "image/jpeg" })) }, initDragUpload: function () { var e = document.body; e.addEventListener("dragenter", function (e) { e.preventDefault() }, !1), e.addEventListener("dragleave", function (e) { e.preventDefault() }, !1), e.addEventListener("dragover", function (e) { e.preventDefault() }, !1), e.addEventListener("drop", function (e) { t(e) }, !1); var t = function (e) { e.preventDefault(); var t = e.dataTransfer.files; if (0 != t.length && -1 !== t[0].type.indexOf("image")) { var i = t[0]; if (/\.(gif|jpg|jpeg|png|webp|GIF|JPG|PNG|WEBP)$/.test(i.name)) return void app.uploadImage2(i); app.uploadFile(i) } } }, initPasteUpload: function () { document.getElementById("input-without-transfer").addEventListener("paste", function (e) { var t, i, a, n = e.clipboardData, s = 0; if (n) { if (!(t = n.items)) return; for (i = t[0], a = n.types || []; s < a.length; s++)if ("Files" === a[s]) { i = t[s]; break } if (i && "file" === i.kind && i.type.match(/^image\//i)) { var o = i.getAsFile(); app.uploadImage2(o) } } }) } }, directives: { focus: { inserted: function (e) { e.focus() } } }, created: function () { if (this.subDomain = this.getUrlParam("sub"), this.type = this.getUrlParam("type"), this.thread.type = this.type.toLowerCase(), this.workGroupWid = null === this.getUrlParam("wid") ? "" : this.getUrlParam("wid"), this.agentUid = null === this.getUrlParam("aid") ? "" : this.getUrlParam("aid"), this.nickname = null === this.getUrlParam("nickname") ? "" : this.getUrlParam("nickname"), this.avatar = null === this.getUrlParam("avatar") ? "" : this.getUrlParam("avatar"), this.loadHistory = this.getUrlParam("history"), "1" === this.loadHistory && (this.loadMoreVisible = !0), this.postscript = this.getUrlParam("postscript"), this.showScript = "1" === this.getUrlParam("showScript"), this.hideNav = "1" === this.getUrlParam("hidenav"), this.isEmbed = "1" === this.getUrlParam("isembed"), this.closable = "1" === this.getUrlParam("closable"), this.backUrl = null === this.getUrlParam("backurl") || "" === this.getUrlParam("backurl") ? document.referrer : this.getUrlParam("backurl"), this.lang = null === this.getUrlParam("lang") ? "cn" : this.getUrlParam("lang"), this.color = null === this.getUrlParam("color") ? "#ffffff" : this.getUrlParam("color"), this.background = null === this.getUrlParam("background") ? "#007bff" : this.getUrlParam("background"), this.v2robot = null === this.getUrlParam("v2robot") ? "0" : this.getUrlParam("v2robot"), this.$i18n.locale = this.lang, this.delaySendPreviewMessage = _.debounce(this.sendPreviewMessage, 1500), $("#page-header").css("color", this.color), $("#page-header").css("background-color", this.background), this.selfuser = this.getUrlParam("selfuser"), "1" === this.selfuser) if ("1" !== localStorage.bd_kfe_selfuser) localStorage.bd_kfe_selfuser = "1", this.registerUser(); else { this.access_token = localStorage.bd_kfe_access_token, this.uid = localStorage.bd_kfe_uid, this.username = localStorage.bd_kfe_username, this.password = this.username; var e = this.getUrlParam("username"); this.username === e ? null !== this.access_token && void 0 !== this.access_token && "" !== this.access_token ? this.requestThread() : null !== this.username && void 0 !== this.username && "" !== this.username && (console.log("create login 1"), this.login()) : this.registerUser() } else "2" === this.selfuser ? (console.log("从pc扫码过来"), this.uid = this.getUrlParam("uid"), null !== this.uid && void 0 !== this.uid && "" !== this.uid ? (console.log("uid: " + this.uid), this.loadHistory, this.loadMoreVisible = !0, this.getProfile(this.uid)) : app.$toast("参数错误-selfuser2")) : "1" === localStorage.bd_kfe_selfuser ? (localStorage.bd_kfe_selfuser = "0", this.requestUsername()) : (localStorage.bd_kfe_selfuser = "0", this.access_token = localStorage.bd_kfe_access_token, this.uid = localStorage.bd_kfe_uid, this.username = localStorage.bd_kfe_username, this.password = this.username, null !== this.access_token && void 0 !== this.access_token && "" !== this.access_token ? this.requestThread() : null !== this.username && void 0 !== this.username && "" !== this.username ? (console.log("create login 2"), this.login()) : this.requestUsername()) }, mounted: function () { String.prototype.startsWith || (String.prototype.startsWith = function (e, t) { return t = t || 0, this.indexOf(e, t) === t }), String.prototype.includes || (String.prototype.includes = function (e) { var t = !1; return -1 !== this.indexOf(e) && (t = !0), t }), String.prototype.endsWith || (String.prototype.endsWith = function (e) { return -1 !== this.indexOf(e, this.length - e.length) }), this.loadHistoryTimer = setInterval(this.loadMessagesUnread, 5e3), this.sendMessageTimer = setInterval(this.checkTimeoutMessage, 1e3), this.initDragUpload(), this.initPasteUpload(); var e = this; document.addEventListener("WeixinJSBridgeReady", function () { console.log("WeixinJSBridgeReady"), e.isWeixinBrowser = !0 }, !1), window.addEventListener("online", function () { e.isNetworkDisconnected = !1, e.$toast(e.networkConnectedTip), $("#input-without-transfer").attr("placeholder", e.pleaseInputTip), e.loadMessagesUnread() }), window.addEventListener("offline", function () { e.isNetworkDisconnected = !0, e.$toast(e.networkDisconnectedTip), $("#input-without-transfer").attr("placeholder", e.networkDisconnectedTip) }) }, beforeDestroy: function () { clearInterval(this.loadHistoryTimer), clearInterval(this.sendMessageTimer) } });