"use strict"; document.getElementById("app-wrapper").style.display = ""; var options = { fullscreenEl: !1 }; Vue.use(vuePhotoPreview, options); var messages = { en: { contactAgent: "contact agent", typing: "typing...", sendLink: "send link", agentChat: "agent chat", viewFile: "view file", arrived: "arrived", readed: "readed", sending: "sending", error: "error", leaveWord: "leave message", name: "name", inputName: "input name", mobile: "mobile", inputMobile: "input mobile", leaveContent: "leave content", email: "email", inputEmail: "input email", age: "age", inputAge: "input age", job: "job", inputJob: "input job", pleaseRate: "please rate", veryGood: "very good", good: "good", average: "average", notGood: "not good", bad: "very bad", submit: "submit", inviteRate: "invite rate", rateResult: "rated", rate: "rate", rateContent: "rate content", pleaseInput: "please input", rateAgain: "cant rate again", continueChat: "continue", agentCloseThread: "agent close thread", visitorCloseThread: "visitor close thread", autoCloseThread: "system close thread", agentOffline: "agent offline, please leave message", postScriptPrefix: "<postScript>:", send: "send", joinQueueThread: "start chat", cancel: "cancel", image: "image", restart: "restart", wrongMobileNum: "wrong mobile number", ageMustBeNum: "age must be number", contentMustNotNull: "content must not be null", contentTooLong: "content too long", wrongWid: "wrong wid", queuing: "queuing, please wait" }, cn: { contactAgent: "联系客服", typing: "对方正在输入...", sendLink: "发送链接", agentChat: "人工客服", viewFile: "查看文件", arrived: "送达", readed: "已读", sending: "发送中", error: "错误", leaveWord: "留言", name: "姓名", inputName: "请输入姓名", mobile: "手机号", inputMobile: "请输入手机号", leaveContent: "留言内容", email: "邮箱", inputEmail: "请输入邮箱", age: "年龄", inputAge: "请输入年龄", job: "职业", inputJob: "请输入职业", pleaseRate: "请对我们服务做出评价", veryGood: "非常满意", good: "满意", average: "一般", notGood: "不满意", bad: "非常不满意", submit: "提交", inviteRate: "邀请评价", rateResult: "已评价", rate: "评价", rateContent: "评价内容", pleaseInput: "请简单描述您的问题", rateAgain: "不能重复评价", continueChat: "继续会话", agentCloseThread: "客服关闭会话", visitorCloseThread: "访客关闭会话", autoCloseThread: "长时间没有对话，系统自动关闭会话", agentOffline: "当前无客服在线，请留言", postScriptPrefix: "<附言>:", send: "发送", joinQueueThread: "接入会话", cancel: "取消", image: "图片", restart: "重新开始", wrongMobileNum: "手机号错误", ageMustBeNum: "年龄必须为数字", contentMustNotNull: "消息不能为空", contentTooLong: "消息长度太长，请分多次发送", wrongWid: "siteId或者工作组id错误", queuing: "排队中，请稍后" } }, i18n = new VueI18n({ locale: "cn", messages: messages }), app = new Vue({ el: "#app", i18n: i18n, name: "video", data: function () { return { IS_PRODUCTION: !0, HTTP_HOST: "https://h5api.bytedesk.com", STOMP_HOST: "https://h5stomp.bytedesk.com", title: "在线客服", isInputingVisible: !1, localPreviewContent: "", imageDialogVisible: !1, currentImageUrl: "", currentVoiceUrl: "", inputContent: "", messages: [], loadMoreVisible: !0, realname: "", mobile: "", email: "", age: 0, job: "", content: "", showRealname: !1, showMobile: !1, showEmail: !1, showAge: !1, showJob: !1, showContent: !1, isRated: !1, isInviteRate: !1, rateScore: 5, rateValue: "非常满意", rateContent: "", isLoading: !1, stompClient: "", sessionId: "", preSessionId: "", browseInviteBIid: "", access_token: "", passport: { token: { access_token: "" } }, workGroupWid: "", subDomain: "", client: "web_h5", thread: { id: 0, tid: "", topic: "", type: "", visitor: { uid: "", nickname: "visitor", avatar: "https://chainsnow.oss-cn-shenzhen.aliyuncs.com/avatars/visitor_default_avatar.png" } }, subscribedTopics: [], page: 0, last: !1, type: "workGroup", agentUid: "", selfuser: "0", uid: "", username: "", password: "", nickname: "", avatar: "", token: "bd_kfe_token", isConnected: !1, answers: [], isRobot: !1, isQueuing: !1, isThreadStarted: !1, isThreadClosed: !1, isManulRequestThread: !1, isRequestAgent: !1, leaveMessageTip: "", loadHistory: "0", robotUser: { uid: "", nickname: "", avatar: "" }, postscript: "", showScript: !1, hideNav: !1, backUrl: "", topTip: "", showTopTip: !1, showMessage: !0, showInputBar: !0, showLeaveMessage: !1, showRate: !1, showForm: !1, insertMessage: {}, showInputToolBar: !0, showPlusButton: !0, showPlusPanel: !1, showRestartPanel: !1, lang: "cn", v2robot: "0", loadHistoryTimer: "", sendMessageTimer: "", quickButtonArrow: "↓", showQuickButton: !1, showQuickButtonItem: !0, quickButtons: [], emotionBaseUrl: "https://chainsnow.oss-cn-shenzhen.aliyuncs.com/emojis/gif/", emotionMap: { "[微笑]": "100.gif", "[撇嘴]": "101.gif", "[色]": "102.gif", "[发呆]": "103.gif", "[得意]": "104.gif", "[流泪]": "105.gif", "[害羞]": "106.gif", "[闭嘴]": "107.gif", "[睡]": "108.gif", "[大哭]": "109.gif", "[尴尬]": "110.gif", "[发怒]": "111.gif", "[调皮]": "112.gif", "[呲牙]": "113.gif", "[惊讶]": "114.gif", "[难过]": "115.gif", "[酷]": "116.gif", "[冷汗]": "117.gif", "[抓狂]": "118.gif", "[吐]": "119.gif", "[偷笑]": "120.gif", "[愉快]": "121.gif", "[白眼]": "122.gif", "[傲慢]": "123.gif", "[饥饿]": "124.gif", "[困]": "125.gif", "[惊恐]": "126.gif", "[流汗]": "127.gif", "[憨笑]": "128.gif", "[悠闲]": "129.gif", "[奋斗]": "130.gif", "[咒骂]": "131.gif", "[疑问]": "132.gif", "[嘘]": "133.gif", "[晕]": "134.gif", "[疯了]": "135.gif", "[衰]": "136.gif", "[骷髅]": "137.gif", "[敲打]": "138.gif", "[再见]": "139.gif", "[擦汗]": "140.gif", "[抠鼻]": "141.gif", "[鼓掌]": "142.gif", "[糗大了]": "143.gif", "[坏笑]": "144.gif", "[左哼哼]": "145.gif", "[右哼哼]": "146.gif", "[哈欠]": "147.gif", "[鄙视]": "148.gif", "[委屈]": "149.gif", "[快哭]": "150.gif", "[阴险]": "151.gif", "[亲亲]": "152.gif", "[吓]": "153.gif", "[可怜]": "154.gif", "[菜刀]": "155.gif", "[西瓜]": "156.gif", "[啤酒]": "157.gif", "[篮球]": "158.gif", "[乒乓]": "159.gif", "[咖啡]": "160.gif", "[饭]": "161.gif", "[猪头]": "162.gif", "[玫瑰]": "163.gif", "[凋谢]": "164.gif", "[嘴唇]": "165.gif", "[爱心]": "166.gif", "[心碎]": "167.gif", "[蛋糕]": "168.gif", "[闪电]": "169.gif", "[炸弹]": "170.gif", "[刀]": "171.gif", "[足球]": "172.gif", "[瓢虫]": "173.gif", "[便便]": "174.gif", "[月亮]": "175.gif", "[太阳]": "176.gif", "[礼物]": "177.gif", "[拥抱]": "178.gif", "[强]": "179.gif", "[弱]": "180.gif", "[握手]": "181.gif", "[胜利]": "182.gif", "[抱拳]": "183.gif", "[勾引]": "184.gif", "[拳头]": "185.gif", "[差劲]": "186.gif", "[爱你]": "187.gif", "[No]": "188.gif", "[OK]": "189.gif", "[爱情]": "190.gif", "[飞吻]": "191.gif", "[跳跳]": "192.gif", "[发抖]": "193.gif", "[怄火]": "194.gif", "[转圈]": "195.gif", "[磕头]": "196.gif", "[回头]": "197.gif", "[跳绳]": "198.gif", "[投降]": "199.gif", "[激动]": "201.gif", "[乱舞]": "202.gif", "[献吻]": "203.gif", "[左太极]": "204.gif", "[右太极]": "205.gif" }, mediaStreamConstraints: { audio: !0, video: !0 }, videoOfferSdpConstraints: { offerToReceiveAudio: !0, offerToReceiveVideo: !0 }, startTime: "", localVideo: "", remoteVideo: "", localStream: "", localPeerConnection: "", isWeixinBrowser: !1 } }, computed: { disabled: function () { return "" === this.thread.tid }, sendButtonDisabled: function () { return 0 === this.inputContent.trim().length }, threadTopic: function () { return this.thread.topic.replace(/\//g, ".") }, show_header: function () { return !0 }, connectedImage: function () { return this.isConnected ? "https://bytedesk.oss-cn-shenzhen.aliyuncs.com/util/connected.png" : "https://bytedesk.oss-cn-shenzhen.aliyuncs.com/util/disconnected.png" }, leaveWordTip: function () { return this.$t("leaveWord") }, nameTip: function () { return this.$t("name") }, inputNameTip: function () { return this.$t("inputName") }, mobileTip: function () { return this.$t("mobile") }, inputMobileTip: function () { return this.$t("inputMobile") }, leaveContentTip: function () { return this.$t("leaveContent") }, emailTip: function () { return this.$t("email") }, inputEmailTip: function () { return this.$t("inputEmail") }, ageTip: function () { return this.$t("age") }, inputAgeTip: function () { return this.$t("inputAge") }, jobTip: function () { return this.$t("job") }, inputJobTip: function () { return this.$t("inputJob") }, pleaseRateTip: function () { return this.$t("pleaseRate") }, veryGoodTip: function () { return this.$t("veryGood") }, goodTip: function () { return this.$t("good") }, averageTip: function () { return this.$t("average") }, notGoodTip: function () { return this.$t("notGood") }, badTip: function () { return this.$t("bad") }, pleaseInputTip: function () { return this.$t("pleaseInput") }, rateTip: function () { return this.$t("rate") }, rateContentTip: function () { return this.$t("rateContent") }, postScriptPrefixTip: function () { return this.$t("postScriptPrefix") } }, methods: { switchPlusPanel: function () { this.showPlusPanel = !this.showPlusPanel }, switchAgent: function () { this.showLeaveMessage = !1, this.isRobot = !1, this.requestThread() }, switchLeaveMessage: function () { this.showMessage = !1, this.showInputBar = !1, this.showLeaveMessage = !0 }, switchForm: function () { this.showMessage = !1, this.showInputBar = !1, this.showForm = !0 }, switchRate: function () { this.showMessage = !1, this.showInputBar = !1, this.showRate = !0 }, switchMessage: function () { this.showMessage = !0, this.showInputBar = !0, this.showRate = !1, this.showForm = !1, this.showLeaveMessage = !1 }, imageClicked: function (t) { window.open(t) }, fileClicked: function (t) { window.open(t) }, voiceClicked: function (t) { window.open(t) }, videoClicked: function (t) { window.open(t) }, is_self: function (t) { return null != t.user && t.user.uid === this.uid }, is_sending: function (t) { return "sending" === t.status }, is_stored: function (t) { return "stored" === t.status }, is_received: function (t) { return "received" === t.status }, is_error: function (t) { return "error" === t.status }, is_read: function (t) { return "read" === t.status }, can_recall: function (t) { return this.callRecallMessage(t) && this.is_self(t) && ("text" === t.type || "image" === t.type) }, callRecallMessage: function (t) { var e = moment(new Date, "YYYY-MM-DD HH:mm:ss"), i = moment(t.createdAt, "YYYY-MM-DD HH:mm:ss"); return e.diff(i, "seconds") < 180 }, is_type_text: function (t) { return "text" === t.type || "notification_thread" === t.type || "notification_auto_close" === t.type }, is_type_robot: function (t) { return "robot" === t.type }, is_type_robot_v2: function (t) { return "robotv2" === t.type }, is_type_robot_result: function (t) { return "robot_result" === t.type }, is_type_image: function (t) { return "image" === t.type }, is_type_file: function (t) { return "file" === t.type }, is_type_voice: function (t) { return "voice" === t.type }, is_type_video: function (t) { return "video" === t.type || "shortvideo" === t.type }, is_type_commodity: function (t) { return "commodity" === t.type }, is_type_questionnaire: function (t) { return "questionnaire" === t.type }, is_type_company: function (t) { return "company" === t.type }, is_type_workGroup: function (t) { return "workGroup" === t.type }, is_type_form_request: function (t) { return "notification_form_request" === t.type }, is_type_form_result: function (t) { return "notification_form_result" === t.type }, is_type_thread: function (t) { return "notification_thread" === t.type }, is_type_notification: function (t) { return "notification_preview" !== t.type && "notification_thread" !== t.type && t.type.startsWith("notification") || "commodity" === t.type }, is_type_close: function (t) { return "notification_auto_close" === t.type || "notification_agent_close" === t.type }, is_type_notification_agent_close: function (t) { return "notification_agent_close" === t.type }, is_type_notification_visitor_close: function (t) { return "notification_visitor_close" === t.type }, is_type_notification_auto_close: function (t) { return "notification_auto_close" === t.type }, is_type_notification_thread_reentry: function (t) { return "notification_thread_reentry" === t.type }, is_type_notification_connect: function (t) { return "notification_connect" === t.type }, is_type_notification_disconnect: function (t) { return "notification_disconnect" === t.type }, is_type_notification_offline: function (t) { return "notification_offline" === t.type }, is_type_notification_queue_accept: function (t) { return "notification_queue_accept" === t.type }, is_type_notification_invite_rate: function (t) { return "notification_invite_rate" === t.type }, is_type_notification_rate_result: function (t) { return "notification_rate_result" === t.type }, is_type_notification_rate_helpful: function (t) { return "notification_rate_helpful" === t.type }, is_type_notification_rate_helpless: function (t) { return "notification_rate_helpless" === t.type }, my_uid: function () { return this.uid }, my_username: function () { return this.username }, thread_nickname: function () { return this.nickname.trim().length > 0 ? this.nickname : this.thread.visitor.nickname }, my_nickname: function () { return this.nickname.trim().length > 0 ? this.nickname : this.thread.visitor.nickname }, my_avatar: function () { return this.avatar.trim().length > 0 ? this.avatar : this.thread.visitor.avatar }, jsonObject: function (t) { return null === t ? '{"categoryCode":"","content":"","id":"0","imageUrl":"","price":"","title":"","type":"commodity","url":""}' : JSON.parse(t) }, replaceUrl: function (t) { if (!t) return t; var e = /(https?:\/\/|www\.)[a-zA-Z_0-9\-@]+(\.\w[a-zA-Z_0-9\-:]+)+(\/[()~#&\-=?+%\/.\w]+)?/g; return t.replace(e, function (t) { return '<a href="' + t + '" target="_blank">' + t + "</a>" }) }, replaceFace: function (t) { if (null === t || void 0 === t) return ""; var e = this.replaceUrl(t), i = this.emotionMap, a = /\[[\u4E00-\u9FA5NoOK]+\]/g, n = e.match(a), s = e; if (n) for (var o = 0; o < n.length; o++)s = s.replace(n[o], "<img height='25px' width='25px' style='margin-bottom:4px;' src='" + this.emotionBaseUrl + i[n[o]] + "'>"); return s }, escapeHTML: function (t) { return t.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;") }, handleImageDialogClose: function (t) { t() }, scrollToBottom: function () { var t = this; this.$nextTick(function () { var e = t.$refs.listm; null != e && (e.scrollTop = e.scrollHeight) }) }, pushToMessageArray: function (t) { for (var e = !1, i = 0; i < this.messages.length; i++) { this.messages[i].mid === t.mid && (e = !0) } e || (this.messages.push(t), this.messages.sort(function (t, e) { return t.createdAt > e.createdAt ? 1 : t.createdAt < e.createdAt ? -1 : 0 })), "image" === t.type && app.$previewRefresh() }, unshiftToMessageArray: function (t) { for (var e = !1, i = 0; i < this.messages.length; i++) { this.messages[i].mid === t.mid && (e = !0) } e || this.messages.unshift(t), "image" === t.type && app.$previewRefresh() }, getUrlParam: function (t) { var e = new RegExp("(^|&)" + t + "=([^&]*)(&|$)"), i = window.location.search.substr(1).match(e); return null != i ? decodeURIComponent(i[2]) : null }, isWeixin: function () { return !(-1 == navigator.userAgent.toLowerCase().indexOf("micromessenger")) }, requestUsername: function () { this.$indicator.open(), $.ajax({ url: this.HTTP_HOST + "/visitor/api/username", contentType: "application/json; charset=utf-8", type: "get", data: { nickname: this.nickname, avatar: this.avatar, subDomain: this.subDomain, client: this.client }, success: function (t) { console.log("user:", t.data), app.uid = t.data.uid, app.username = t.data.username, app.password = app.username, app.nickname = t.data.nickname, app.avatar = t.data.avatar, localStorage.bd_kfe_uid = app.uid, localStorage.bd_kfe_username = app.username, app.login() }, error: function (t) { console.log(t) } }) }, registerUser: function () { var t = this.getUrlParam("username"), e = null == this.getUrlParam("nickname") ? t : this.getUrlParam("nickname"), i = null === this.getUrlParam("avatar") ? "" : this.getUrlParam("avatar"); this.printLog("username self:" + t + e + i); var a = t; $.ajax({ url: this.HTTP_HOST + "/visitor/api/register/user", contentType: "application/json; charset=utf-8", dataType: "json", type: "post", data: JSON.stringify({ username: t, nickname: e, password: a, avatar: i, subDomain: this.subDomain, client: this.client }), success: function (n) { app.printLog("registerUser success: " + JSON.stringify(n)), 200 === n.status_code ? (app.uid = n.data.uid, app.username = n.data.username, app.password = a, app.nickname = n.data.nickname, app.avatar = n.data.avatar, localStorage.bd_kfe_uid = app.uid, localStorage.bd_kfe_username = app.username, localStorage.bd_kfe_nickname = app.nickname) : (app.uid = n.data, app.username = t + "@" + app.subDomain, app.password = a, app.nickname = e, app.avatar = i, localStorage.bd_kfe_uid = app.uid, localStorage.bd_kfe_username = app.username, localStorage.bd_kfe_nickname = app.nickname), app.login() }, error: function (t) { app.printLog(t) } }) }, login: function () { $.ajax({ url: this.HTTP_HOST + "/oauth/token", type: "post", data: { username: this.username, password: this.password, grant_type: "password", scope: "all" }, beforeSend: function (t) { t.setRequestHeader("Authorization", "Basic Y2xpZW50OnNlY3JldA==") }, success: function (t) { localStorage.access_token = t.access_token, localStorage.bd_kfe_access_token = t.access_token, app.requestThread() }, error: function (t) { console.log(t) } }) }, requestThread: function () { this.$indicator.open(), $.ajax({ url: this.HTTP_HOST + "/api/thread/request", contentType: "application/json; charset=utf-8", type: "get", data: { wId: this.workGroupWid, type: this.type, aId: this.agentUid, webrtc: 1, client: this.client }, beforeSend: function (t) { t.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (t) { app.printLog("requestThread:" + JSON.stringify(t)), app.$indicator.close(), app.dealWithThread(t) }, error: function (t) { console.log(t), app.login() } }) }, dealWithThread: function (t) { console.log("dealWithThread:", t); var e = t.data; 200 === t.status_code ? (app.thread = e.thread, app.thread.appointed ? app.title = app.thread.agent.nickname : app.title = app.thread.workGroup.nickname, app.isRobot = !1, app.robotUser = e.user, app.isThreadClosed = !1) : 201 === t.status_code ? (app.pushToMessageArray(e), app.thread = e.thread, app.thread.appointed ? app.title = app.thread.agent.nickname : app.title = app.thread.workGroup.nickname, app.isRobot = !1, app.robotUser = e.user, app.isThreadClosed = !1) : 202 === t.status_code ? (app.$toast("当前视频客服忙线中，请稍后再试"), this.hangupAction(), app.pushToMessageArray(e), app.thread = e.thread, app.isQueuing = !0) : 203 === t.status_code ? (app.$toast("当前无视频客服在线，请稍后再试"), this.hangupAction(), app.pushToMessageArray(e), app.leaveMessageTip = e.content, app.thread = e.thread, app.thread.appointed ? app.title = app.thread.agent.nickname : app.title = app.thread.workGroup.nickname) : 204 === t.status_code ? (app.$toast("当前无视频客服在线，请稍后再试"), this.hangupAction(), app.pushToMessageArray(e), app.leaveMessageTip = e.content, app.thread = e.thread, app.thread.appointed ? app.title = app.thread.agent.nickname : app.title = app.thread.workGroup.nickname) : 205 === t.status_code ? (app.pushToMessageArray(e), app.thread = e.thread) : 206 === t.status_code ? (app.pushToMessageArray(e), app.thread = e.thread, app.thread.appointed ? app.title = app.thread.agent.nickname : app.title = app.thread.workGroup.nickname, app.isRobot = !0, app.robotUser = e.user) : 207 === t.status_code ? (app.$toast("视频客服忙线中，请稍后再试"), this.hangupAction()) : -1 === t.status_code ? (this.hangupAction(), app.login()) : -2 === t.status_code ? (app.$toast(this.$t("wrongWid")), this.hangupAction()) : -3 === t.status_code ? (app.$toast("未知错误"), this.hangupAction()) : -4 === t.status_code ? (app.$toast("系统流量过大，请稍后再试"), this.hangupAction()) : -5 === t.status_code && this.hangupAction(), document.title = app.title, app.byteDeskConnect() }, rate: function () { if (this.switchMessage(), app.isRated) return void app.$toast(this.$t("rateAgain")); this.rateValue === this.veryGoodTip ? this.rateScore = 5 : this.rateValue === this.goodTip ? this.rateScore = 4 : this.rateValue === this.averageTip ? this.rateScore = 3 : this.rateValue === this.notGoodTip ? this.rateScore = 2 : this.rateValue === this.badTip && (this.rateScore = 1), $.ajax({ url: this.HTTP_HOST + "/api/rate/do", contentType: "application/json; charset=utf-8", dataType: "json", type: "post", data: JSON.stringify({ tid: this.thread.tid, score: this.rateScore, note: this.rateContent, invite: this.isInviteRate, client: this.client }), beforeSend: function (t) { t.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (t) { console.log("rate: ", t), app.isRated = !0 }, error: function (t) { console.log(t), app.login() } }) }, upload: function () { $("input[id=imagefile]").click() }, uploadImage: function () { var t = $("input[id=imagefile]")[0].files[0]; this.uploadImage2(t) }, uploadImage2: function (t) { this.compressImage(t, function (t) { var e = new FormData; e.append("file_name", app.guid()), e.append("username", app.username), e.append("file", t), e.append("client", app.client), $.ajax({ url: app.HTTP_HOST + "/visitor/api/upload/image", contentType: !1, cache: !1, processData: !1, mimeTypes: "multipart/form-data", type: "post", data: e, success: function (t) { app.printLog("upload response:" + JSON.stringify(t.data)); var e = t.data; app.sendImageMessage(e) }, error: function (t) { app.printLog(t), app.login() } }) }) }, uploadFile: function (t) { var e = new FormData; e.append("file_name", app.guid()), e.append("username", app.username), e.append("file", t), e.append("client", app.client), $.ajax({ url: app.HTTP_HOST + "/visitor/api/upload/file", contentType: !1, cache: !1, processData: !1, mimeTypes: "multipart/form-data", type: "post", data: e, success: function (t) { app.printLog("upload response:" + JSON.stringify(t.data)); var e = t.data; app.sendFileMessage(e) }, error: function (t) { app.printLog(t) } }) }, compressImage: function (t, e) { if (!(t.size > 1048576)) return app.printLog("图片小于1M直接上传"), e(t); app.printLog("图片大于1M进行压缩"), app.canvasDataURL(t, function (i) { var a = new File([i], t.name, { type: t.type }); app.printLog("file.size:" + t.size / 1024 / 1024), app.printLog("newFile.size: " + a.size / 1024 / 1024), t.size < a.size && e(t), e(a) }) }, canvasDataURL: function (t, e) { var i = new FileReader; i.readAsDataURL(t), i.onload = function (t) { var i = new Image, a = document.createElement("canvas"), n = a.getContext("2d"); i.src = this.result, i.onload = function () { return a.width = i.width, a.height = i.height, n.drawImage(i, 0, 0, a.width, a.height), app.convertBase64UrlToBlob(a.toDataURL("image/jpeg", .1), e) } } }, convertBase64UrlToBlob: function (t, e) { for (var i = window.atob(t.split(",")[1]), a = new ArrayBuffer(i.length), n = new Uint8Array(a), s = 0; s < i.length; s++)n[s] = i.charCodeAt(s); e(new Blob([a], { type: "image/jpeg" })) }, loadHistoryMessagesByTopic: function (t) { this.isRequestAgent || this.isManulRequestThread || "0" === this.loadHistory || $.ajax({ url: this.HTTP_HOST + "/api/messages/topic", type: "get", data: { topic: t, page: this.page, size: 10, client: this.client }, beforeSend: function (t) { t.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (t) { if (200 === t.status_code) for (var e = 0; e < t.data.content.length; e++) { var i = t.data.content[e]; if ("notification_form_request" === i.type || i.type, "notification_thread_reentry" === i.type) { if (e + 1 < length) { var a = t.data.content[e + 1]; if ("notification_thread_reentry" === a.type) continue; app.unshiftToMessageArray(i) } } else app.unshiftToMessageArray(i) } else "1" === app.loadHistory && app.pushToMessageArray(app.insertMessage); app.scrollToBottom(), app.$previewRefresh() }, error: function (t) { console.log(t), app.login() } }) }, loadLatestMessage: function () { var t = app.loadHistory ? 10 : 1; $.ajax({ url: this.HTTP_HOST + "/api/messages/topic", type: "get", data: { topic: app.thread.topic, page: 0, size: t, client: this.client }, beforeSend: function (t) { t.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (t) { if (200 === t.status_code) for (var e = 0; e < t.data.content.length; e++) { var i = t.data.content[e]; if ("notification_form_request" === i.type || i.type, "notification_thread_reentry" === i.type) { if (e + 1 < length) { var a = t.data.content[e + 1]; if ("notification_thread_reentry" === a.type) continue; app.unshiftToMessageArray(i) } } else app.unshiftToMessageArray(i) } app.scrollToBottom(), app.$previewRefresh() }, error: function (t) { console.log(t), app.login() } }) }, loadMessagesUnread: function () { app.isConnected || app.isRobot || $.ajax({ url: this.HTTP_HOST + "/api/messages/unread/message/visitor/schedule", type: "get", data: { page: 0, size: 10, client: this.client }, beforeSend: function (t) { t.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (t) { if (200 === t.status_code) for (var e = 0; e < t.data.content.length; e++) { var i = t.data.content[e]; if ("notification_form_request" === i.type || i.type, "notification_thread_reentry" === i.type) { if (e + 1 < length) { var a = t.data.content[e + 1]; if ("notification_thread_reentry" === a.type) continue; app.unshiftToMessageArray(i) } } else app.unshiftToMessageArray(i) } app.scrollToBottom(), app.$previewRefresh() }, error: function (t) { console.log(t), app.login() } }) }, appendQueryMessage: function (t) { var e = { mid: this.guid(), timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "robot", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar(), extra: { agent: !1 } }, text: { content: t }, answers: [], thread: { tid: this.thread.tid, type: this.thread.type, content: t, nickname: this.thread_nickname(), avatar: this.thread.visitor.avatar, topic: this.threadTopic, client: this.client, timestamp: this.currentTimestamp(), unreadCount: 0 } }; this.onMessageReceived(e) }, appendReplyMessage: function (t, e, i) { var a = { mid: e, timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "robot_result", user: { uid: this.robotUser.uid, nickname: this.robotUser.nickname, avatar: this.robotUser.avatar, extra: { agent: !0 } }, text: { content: i }, answer: { aid: t }, answers: [], thread: { tid: this.thread.tid, type: this.thread.type, content: i, nickname: this.thread_nickname(), avatar: this.thread.visitor.avatar, topic: this.threadTopic, client: this.client, timestamp: this.currentTimestamp(), unreadCount: 0 } }; this.onMessageReceived(a) }, queryAnswer: function (t) { this.appendQueryMessage(t.question); var e = this.guid(); this.appendReplyMessage(t.aid, e, t.answer), $.ajax({ url: this.HTTP_HOST + "/api/v2/answer/query", contentType: "application/json; charset=utf-8", type: "get", data: { tid: this.thread.tid, aid: t.aid, mid: e, client: this.client }, beforeSend: function (t) { t.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (t) { 200 === t.status_code || app.$toast(t.message) }, error: function (t) { console.log("query answers error:", t), app.login() } }) }, queryCategory: function (t) { console.log("category:", t), this.appendQueryMessage(t.name), $.ajax({ url: this.HTTP_HOST + "/api/v2/answer/category", contentType: "application/json; charset=utf-8", type: "get", data: { tid: this.thread.tid, cid: t.cid, client: this.client }, beforeSend: function (t) { t.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (t) { if (200 === t.status_code) { var e = t.data.reply; app.pushToMessageArray(e), app.scrollToBottom() } else app.$toast(t.message) }, error: function (t) { console.log("query answers error:", t), app.login() } }) }, messageAnswer: function (t) { if (this.appendQueryMessage(t), -1 !== t.indexOf("人工")) return void app.requestAgent(); $.ajax({ url: this.HTTP_HOST + "/api/elastic/robot/message", contentType: "application/json; charset=utf-8", type: "get", data: { wid: this.workGroupWid, content: t, client: this.client }, beforeSend: function (t) { t.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (t) { if (200 === t.status_code || 201 === t.status_code) { var e = t.data.reply; e.type = "robot_result", app.pushToMessageArray(e), app.scrollToBottom() } else app.$toast(t.data.message) }, error: function (t) { console.log("query answers error:", t), app.login() } }) }, rateAnswerHelpful: function (t, e) { $.ajax({ url: this.HTTP_HOST + "/api/answer/rate", contentType: "application/json; charset=utf-8", dataType: "json", type: "post", data: JSON.stringify({ aid: t, mid: e, rate: !0, client: this.client }), beforeSend: function (t) { t.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (t) { if (200 === t.status_code) { var e = t.data; app.pushToMessageArray(e), app.scrollToBottom() } else app.$toast(t.message) }, error: function (t) { console.log(t), app.login() } }) }, rateAnswerHelpless: function (t, e) { $.ajax({ url: this.HTTP_HOST + "/api/answer/rate", contentType: "application/json; charset=utf-8", dataType: "json", type: "post", data: JSON.stringify({ aid: t, mid: e, rate: !1, client: this.client }), beforeSend: function (t) { t.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (t) { if (200 === t.status_code) { var e = t.data; app.pushToMessageArray(e), app.scrollToBottom() } else app.$toast(t.message) }, error: function (t) { console.log(t), app.login() } }) }, switchQuickButtonItems: function () { this.showQuickButtonItem = !this.showQuickButtonItem, this.showQuickButtonItem ? this.quickButtonArrow = "↓" : this.quickButtonArrow = "↑" }, quickButtonItemClicked: function (t) { if ("url" === t.type) window.open(t.content); else { var e = this.guid(), i = { mid: e, type: "text", content: t.title, createdAt: this.currentTimestamp(), localId: e, status: "stored", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar() } }; this.pushToMessageArray(i); var a = this.guid(), n = { mid: a, type: "text", content: t.content, createdAt: this.currentTimestamp(), localId: e, status: "stored", user: { uid: "", username: "", nickname: "系统", avatar: "https://chainsnow.oss-cn-shenzhen.aliyuncs.com/avatars/admin_default_avatar.png" } }; this.pushToMessageArray(n), this.scrollToBottom() } }, getQuickButtons: function () { "workGroup" === this.type && $.ajax({ url: this.HTTP_HOST + "/api/quickbutton/query/workGroup", contentType: "application/json; charset=utf-8", type: "get", data: { wid: this.workGroupWid, client: this.client }, beforeSend: function (t) { t.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (t) { t.data.length > 0 && (app.showQuickButton = !0), app.quickButtons = t.data }, error: function (t) { console.log("getQuickButtons error:", t), app.login() } }) }, getPrechatSettings: function () { "workGroup" === this.type && $.ajax({ url: this.HTTP_HOST + "/visitor/api/prechat/settings", contentType: "application/json; charset=utf-8", type: "get", data: { wid: this.workGroupWid, client: this.client }, success: function (t) { app.showTopTip = t.data.showTopTip, app.topTip = t.data.topTip, t.data.showForm && (app.showRealname = !0, app.showMobile = !0, app.switchForm()) }, error: function (t) { console.log("fetch pre setting error:", t), app.login() } }) }, leaveMessage: function () { return 11 !== this.mobile.trim().length ? void this.$toast("手机号错误") : 0 === this.content.trim().length ? void this.$toast("留言内容不能为空") : (this.switchMessage(), void $.ajax({ url: this.HTTP_HOST + "/api/leavemsg/save", contentType: "application/json; charset=utf-8", dataType: "json", type: "post", data: JSON.stringify({ wid: this.workGroupWid, aid: this.agentUid, type: this.type, mobile: this.mobile, email: "", content: this.content, client: this.client }), beforeSend: function (t) { t.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (t) { 200 === t.status_code ? (app.sendTextMessageSync(app.mobile + ":" + app.content), app.$toast("留言成功")) : app.$toast(t.message) }, error: function (t) { console.log(t), app.$toast("留言失败"), app.login() } })) }, currentTimestamp: function () { var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : +new Date; return new Date(t + 288e5).toJSON().substr(0, 19).replace("T", " ") }, guid: function () { function t() { return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1) } return moment(new Date).format("YYYYMMDDHHmmss") + t() + t() + t() + t() + t() + t() + t() + t() }, cancelForm: function () { this.switchMessage() }, submitForm: function () { var t = JSON.stringify({ form: { realname: this.realname, mobile: this.mobile, email: this.email, age: this.age, job: this.job } }); if (this.mobile.length > 0 && 11 !== this.mobile.length) return void app.$toast(this.$t("wrongMobileNum")); if (this.age.length > 0 && isNaN(this.age)) return void app.$toast(this.$t("ageMustBeNum")); var e = { mid: this.guid(), timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "notification_form_result", status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar() }, form: { content: t }, thread: { tid: this.thread.tid, type: this.thread.type, content: "[表单]", nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: this.currentTimestamp(), unreadCount: 0 } }; this.doSendMessage(e), this.switchMessage(), this.showRealname = !1, this.showMobile = !1, this.showEmail = !1, this.showAge = !1, this.showJob = !1 }, sendTextMessageSync: function (t) { t = this.escapeHTML(t); var e = { mid: this.guid(), timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "text", status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar(), extra: { agent: !1 } }, text: { content: t }, thread: { tid: this.thread.tid, type: this.thread.type, content: t, nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: this.currentTimestamp(), unreadCount: 0 } }; this.doSendMessage(e) }, sendImageMessage: function (t) { var e = { mid: this.guid(), timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "image", status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar(), extra: { agent: !1 } }, image: { imageUrl: t }, thread: { tid: this.thread.tid, type: this.thread.type, content: "[图片]", nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: this.currentTimestamp(), unreadCount: 0 } }; this.doSendMessage(e) }, sendFileMessage: function (t) { var e = { mid: this.guid(), timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "file", status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar(), extra: { agent: !1 } }, file: { fileUrl: t }, thread: { tid: this.thread.tid, type: this.thread.type, content: "[文件]", nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: this.currentTimestamp(), unreadCount: 0 } }; this.doSendMessage(e) }, sendCommodityMessageSync: function () { if ("1" === this.getUrlParam("goods")) { var t = this.commodityInfo(), e = { mid: this.guid(), timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "commodity", status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar(), extra: { agent: !1 } }, text: { content: t }, thread: { tid: this.thread.tid, type: this.thread.type, content: "[商品]", nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: this.currentTimestamp(), unreadCount: 0 } }; this.doSendMessage(e) } }, appendCommodityInfo: function () { if ("1" === this.getUrlParam("goods")) { var t = this.commodityInfo(), e = { mid: this.guid(), timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "commodity", status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar(), extra: { agent: !1 } }, content: t, thread: { tid: this.thread.tid, type: this.thread.type, content: "[商品]", nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: this.currentTimestamp(), unreadCount: 0 } }; app.pushToMessageArray(e) } }, commodityInfo: function () { var t = { id: this.getUrlParam("goods_id"), title: this.getUrlParam("goods_title"), content: this.getUrlParam("goods_content"), price: this.getUrlParam("goods_price"), url: this.getUrlParam("goods_url"), imageUrl: this.getUrlParam("goods_imageUrl"), categoryCode: this.getUrlParam("goods_categoryCode"), type: "commodity" }; return JSON.stringify(t) }, sendAnswerMessage: function (t) { var e = { mid: this.guid(), timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "notification_webrtc_answer", status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar(), extra: { agent: !1 } }, extra: { content: JSON.stringify(t) }, thread: { tid: this.thread.tid, type: this.thread.type, content: "answer", nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: this.currentTimestamp(), unreadCount: 0 } }; this.doSendMessage(e) }, sendCandidateMessage: function (t) { var e = { mid: this.guid(), timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "notification_webrtc_candidate", status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar(), extra: { agent: !1 } }, extra: { content: JSON.stringify(t) }, thread: { tid: this.thread.tid, type: this.thread.type, content: "candidate", nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: this.currentTimestamp(), unreadCount: 0 } }; this.doSendMessage(e) }, subscribeTopic: function (t) { console.log("subscribeTopic:", t), this.subscribedTopics.includes(t) || (this.subscribedTopics.push(t), this.stompClient.subscribe("/topic/" + t, function (t) { var e = JSON.parse(t.body); app.onMessageReceived(e) })) }, onMessageReceived: function (t) { if (console.log("received:", JSON.stringify(t)), "notification_webrtc_ready" === t.type) return void console.log("notification_webrtc_ready"); if ("notification_webrtc_busy" === t.type) return console.log("notification_webrtc_busy"), this.$toast("客服忙，请稍后再试"), void this.hangupAction(); if ("notification_webrtc_close" === t.type) return console.log("notification_webrtc_close"), this.$toast("客服关闭视频会话"), void this.hangupAction(); if ("notification_webrtc_offer_video" !== t.type) { if ("notification_webrtc_offer_audio" === t.type) return void console.log("notification_webrtc_offer_audio"); if ("notification_webrtc_answer" === t.type) return void console.log("notification_webrtc_answer"); if ("notification_webrtc_candidate" !== t.type) { if ("notification_webrtc_accept" === t.type) return void console.log("notification_webrtc_accept"); if ("notification_webrtc_reject" === t.type) return console.log("notification_webrtc_reject"), this.$toast("客服拒绝视频，请稍后再试"), void this.hangupAction(); if ("text" === t.type || "robot" === t.type || "robot_result" === t.type || "image" === t.type || "file" === t.type || "voice" === t.type || "video" === t.type || "commodity" === t.type) { t.createdAt = t.timestamp, "text" === t.type ? t.content = t.text.content : "robot" === t.type ? t.content = t.text.content : "robot_result" === t.type ? t.content = t.text.content : "image" === t.type ? t.imageUrl = t.image.imageUrl : "file" === t.type ? t.fileUrl = t.file.fileUrl : "voice" === t.type ? (t.voiceUrl = t.voice.voiceUrl, t.length = t.voice.length) : "video" === t.type ? t.videoOrShortUrl = t.video.videoOrShortUrl : "commodity" === t.type && (t.content = t.text.content); var e = t.mid; if (t.user.uid !== app.uid && "robot" != t.type && "robot_result" !== t.type) app.sendReceiptMessage(e, "read"); else for (var i = app.messages.length - 1; i >= 0; i--) { var a = app.messages[i]; if (a.mid === e) { "sending" === app.messages[i].status && Vue.set(app.messages[i], "status", "stored"); break } } } else if ("notification_browse_invite" === t.type); else if ("notification_queue" === t.type) app.isThreadClosed = !1, app.isQueuing = !0; else if ("notification_queue_accept" === t.type) t.createdAt = t.timestamp, t.content = t.text.content, app.isThreadClosed = !1, app.isQueuing = !1; else if ("notification_invite_rate" === t.type) t.createdAt = t.timestamp, t.content = t.extra.content, app.isInviteRate = !0, app.switchRate(); else if ("notification_rate_result" === t.type) t.createdAt = t.timestamp, t.content = t.extra.content; else if ("notification_agent_close" === t.type || "notification_auto_close" === t.type) t.createdAt = t.timestamp, t.content = t.text.content, app.isThreadClosed = !0; else if ("notification_preview" === t.type) t.user.uid !== app.uid && (app.isInputingVisible = !0, setTimeout(function () { app.isInputingVisible = !1 }, 5e3)); else if ("notification_receipt" === t.type) { if (t.user.uid !== app.uid) for (var n = app.messages.length - 1; n >= 0; n--) { var s = app.messages[n]; if (s.mid === t.receipt.mid) { if ("read" === app.messages[n].status) return; Vue.set(app.messages[n], "status", t.receipt.status) } } } else if ("notification_recall" === t.type) for (var o = 0; o < app.messages.length; o++) { var r = app.messages[o]; r.mid === t.recall.mid && app.messages.splice(o, 1) } else if ("notification_form_request" === t.type) { t.content = "表单请求"; var c = t.extra.content; console.log("form:" + c), -1 !== c.indexOf("姓名") && (console.log("showRealname"), app.showRealname = !0), -1 !== c.indexOf("手机") && (app.showMobile = !0), -1 !== c.indexOf("邮箱") && (app.showEmail = !0), -1 !== c.indexOf("年龄") && (app.showAge = !0), -1 !== c.indexOf("职业") && (app.showJob = !0), app.switchForm() } else "notification_form_result" === t.type && (t.content = "发送表单"); "notification_preview" !== t.type && "notification_receipt" !== t.type && "notification_recall" !== t.type && "notification_form_request" !== t.type && "notification_form_result" !== t.type && "notification_connect" !== t.type && "notification_disconnect" !== t.type && ("text" === t.type ? (null != t.content && !t.content.startsWith(app.postScriptPrefixTip) || app.showScript) && app.pushToMessageArray(t) : app.pushToMessageArray(t), app.scrollToBottom()) } else if (console.log("notification_webrtc_candidate"), t.user.uid !== app.uid) { var p = JSON.parse(t.extra.content); if (null !== p && void 0 !== p) { var u = { candidate: p.sdp, sdpMLineIndex: p.sdpMLineIndex, sdpMid: p.sdpMid }; this.localPeerConnection && this.localPeerConnection.remoteDescription && this.localPeerConnection.addIceCandidate(u).then(function () { console.log("addIceCandidate success") }).catch(function (t) { console.log("addIceCandidate:", t) }) } } } else if (console.log("notification_webrtc_offer_video"), t.user.uid !== app.uid) { var d = JSON.parse(t.extra.content); this.onReceiveSdp(d) } }, onInputChange: function (t) { this.isRobot || this.isThreadClosed || (this.localPreviewContent = t, this.delaySendPreviewMessage()) }, sendPreviewMessage: function () { var t = { mid: this.guid(), timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "notification_preview", status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar() }, preview: { content: void 0 === this.localPreviewContent ? " " : this.localPreviewContent }, thread: { tid: this.thread.tid, type: this.thread.type, content: this.localPreviewContent, nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: this.currentTimestamp(), unreadCount: 0 } }; this.doSendMessage(t) }, onKeyUp: function (t) { 13 === t.keyCode && this.inputContent.trim().length > 0 && (this.inputContent = this.inputContent.trim(), this.sendTextMessage()) }, sendTextMessage: function () { if (0 === this.inputContent.trim().length) return void app.$toast(this.$t("contentMustNotNull")); if (this.inputContent.trim().length > 500) return void app.$toast(this.$t("contentTooLong")); if (this.isRobot) this.messageAnswer(this.inputContent); else { if (app.isQueuing) return void app.$toast(this.$t("queuing")); this.sendTextMessageSync(this.inputContent) } this.inputContent = "", setTimeout(function () { $("input")[1].focus() }, 100) }, sendReceiptMessage: function (t, e) { var i = { mid: this.guid(), timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "notification_receipt", status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar() }, receipt: { mid: t, status: e }, thread: { tid: this.thread.tid, type: this.thread.type, nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, timestamp: this.currentTimestamp(), unreadCount: 0 } }; this.doSendMessage(i) }, sendRecallMessage: function (t) { var e = { mid: this.guid(), timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "notification_recall", status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar() }, recall: { mid: t }, thread: { tid: this.thread.tid, type: this.thread.type, nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, timestamp: this.currentTimestamp(), unreadCount: 0 } }; this.doSendMessage(e) }, sendMessageJsonRest: function (t, e, i) { var a; "text" === e ? a = { mid: t, timestamp: this.currentTimestamp(), client: this.client, version: "1", type: e, status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar(), extra: { agent: !1 } }, text: { content: i }, thread: { tid: this.thread.tid, type: this.thread.type, content: i, nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: this.currentTimestamp(), unreadCount: 0 } } : "image" === e ? a = { mid: t, timestamp: this.currentTimestamp(), client: this.client, version: "1", type: e, status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar(), extra: { agent: !1 } }, image: { imageUrl: i }, thread: { tid: this.thread.tid, type: this.thread.type, content: "图片", nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: this.currentTimestamp(), unreadCount: 0 } } : "file" === e ? a = { mid: t, timestamp: this.currentTimestamp(), client: this.client, version: "1", type: e, status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar(), extra: { agent: !1 } }, file: { fileUrl: i }, thread: { tid: this.thread.tid, type: this.thread.type, content: "[文件]", nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: this.currentTimestamp(), unreadCount: 0 } } : "voice" === e ? a = { mid: t, timestamp: this.currentTimestamp(), client: this.client, version: "1", type: e, status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar(), extra: { agent: !1 } }, voice: { voiceUrl: i, length: "0", format: "wav" }, thread: { tid: this.thread.tid, type: this.thread.type, content: "[语音]", nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: this.currentTimestamp(), unreadCount: 0 } } : "video" === e && (a = { mid: t, timestamp: this.currentTimestamp(), client: this.client, version: "1", type: e, status: "sending", user: { uid: this.my_uid(), username: this.my_username(), nickname: this.my_nickname(), avatar: this.my_avatar(), extra: { agent: !1 } }, video: { videoOrShortUrl: i }, thread: { tid: this.thread.tid, type: this.thread.type, content: "[视频]", nickname: this.my_nickname(), avatar: this.my_avatar(), topic: this.threadTopic, client: this.client, timestamp: this.currentTimestamp(), unreadCount: 0 } }), this.sendMessageRest2(t, JSON.stringify(a)) }, doSendMessage: function (t) { app.isConnected ? app.stompClient.send("/app/" + this.threadTopic, {}, JSON.stringify(t)) : app.sendMessageRest(JSON.stringify(t)), this.onMessageReceived(t) }, sendMessageRest: function (t) { $.ajax({ url: this.HTTP_HOST + "/api/messages/send", contentType: "application/json; charset=utf-8", dataType: "json", type: "post", data: JSON.stringify({ json: t }), beforeSend: function (t) { t.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (t) { for (var e = JSON.parse(t.data), i = app.messages.length - 1; i >= 0; i--) { if (app.messages[i].mid === e.mid) { if ("read" === app.messages[i].status || "received" === app.messages[i].status) return; return void Vue.set(app.messages[i], "status", "stored") } } }, error: function (t) { console.log(t), app.login() } }) }, sendMessageRest2: function (t, e) { $.ajax({ url: this.HTTP_HOST + "/api/messages/send", contentType: "application/json; charset=utf-8", dataType: "json", type: "post", data: JSON.stringify({ json: e }), beforeSend: function (t) { t.setRequestHeader("Authorization", "Bearer " + localStorage.bd_kfe_access_token) }, success: function (e) { for (var i = app.messages.length - 1; i >= 0; i--) { if (app.messages[i].mid === t) { if ("read" === app.messages[i].status || "received" === app.messages[i].status) return; return void Vue.set(app.messages[i], "status", "stored") } } }, error: function (t) { console.log(t), app.login() } }) }, resendButtonClicked: function (t) { var e = ""; "text" === t.type ? e = t.content : "image" === t.type ? e = t.imageUrl : "file" === t.type ? e = t.fileUrl : "voice" === t.type ? e = t.voiceUrl : "video" === t.type && (e = t.videoOrShortUrl), this.sendMessageJsonRest(t.mid, t.type, e) }, recallButtonClicked: function (t) { this.$messagebox.confirm("确定要撤回消息?").then(function (e) { console.log("撤回:", e), "confirm" === e && app.sendRecallMessage(t.mid) }) }, checkTimeoutMessage: function () { for (var t = 0; t < this.messages.length; t++) { var e = this.messages[t]; if (this.is_self(e) && this.is_sending(e)) { var i = moment(e.createdAt), a = moment(new Date), n = a.diff(i, "seconds"); n > 15 ? Vue.set(this.messages[t], "status", "error") : n > 3 && this.resendButtonClicked(e) } } }, byteDeskConnect: function () { var t = new SockJS(this.STOMP_HOST + "/stomp/?access_token=" + localStorage.bd_kfe_access_token); this.stompClient = Stomp.over(t), this.stompClient.reconnect_delay = 1e3, this.stompClient.heartbeat.outgoing = 2e4, this.stompClient.heartbeat.incoming = 2e4, this.IS_PRODUCTION && (this.stompClient.debug = function (t) { }), this.stompClient.connect({}, function (t) { app.isConnected = !0, null !== app.thread.tid && void 0 !== app.thread.tid && "" !== app.thread.tid ? app.subscribeTopic(app.threadTopic) : console.log("thread.tid:", app.thread.tid) }, function (t) { console.log("连接断开【" + t + "】"), app.isConnected = !1, app.subscribedTopics = [], setTimeout(function () { console.log("reconnecting..."), app.byteDeskConnect() }, 5e3) }) }, printLog: function (t) { if (!this.IS_PRODUCTION) { var e = (window.performance.now() / 1e3).toFixed(3); console.log(e, t) } }, initDragUpload: function () { var t = document.body; t.addEventListener("dragenter", function (t) { t.preventDefault() }, !1), t.addEventListener("dragleave", function (t) { t.preventDefault() }, !1), t.addEventListener("dragover", function (t) { t.preventDefault() }, !1), t.addEventListener("drop", function (t) { e(t) }, !1); var e = function (t) { t.preventDefault(); var e = t.dataTransfer.files; if (0 != e.length && -1 !== e[0].type.indexOf("image")) { var i = e[0]; if (/\.(gif|jpg|jpeg|png|webp|GIF|JPG|PNG|WEBP)$/.test(i.name)) return void app.uploadImage2(i); app.uploadFile(i) } } }, initLocalStream: function () { console.log("initLocalStream"); var t = this; this.localVideo = document.getElementById("localVideo"), this.localVideo.addEventListener("loadedmetadata", function (t) { var e = t.target; console.log("loadedmetadata 本地视频窗口 " + e.id + " videoWidth: " + e.videoWidth + "px, videoHeight: " + e.videoHeight + "px.") }), navigator.mediaDevices.getUserMedia(t.mediaStreamConstraints).then(function (e) { t.localStream = e, t.localVideo.srcObject = e, t.localVideo.play(), t.createPeerConnection() }).catch(function (t) { console.log("getUserMedia() error: " + t) }) }, initRemoteStream: function () { this.remoteVideo = document.getElementById("remoteVideo"), this.remoteVideo.addEventListener("loadedmetadata", function (t) { var e = t.target; console.log("loadedmetadata 远程视频窗口 " + e.id + " videoWidth: " + e.videoWidth + "px, videoHeight: " + e.videoHeight + "px.") }), this.remoteVideo.addEventListener("onresize", function (t) { var e = t.target; console.log("接通远程视频 remote resize " + e.id + " videoWidth: " + e.videoWidth + "px, videoHeight: " + e.videoHeight + "px.") }) }, createPeerConnection: function () { console.log("createPeerConnection"); try { var t = this, e = { iceServers: [{ urls: "turn:turn.bytedesk.com:3478", username: "jackning", credential: "kX1JiyPGVTtO3y0o" }] }; this.localPeerConnection = new RTCPeerConnection(e), this.localPeerConnection.onicecandidate = function (e) { if (console.log("onicecandidate event: ", e), null !== e.candidate && void 0 !== e.candidate) { var i = { sdp: e.candidate.candidate, sdpMLineIndex: e.candidate.sdpMLineIndex, sdpMid: e.candidate.sdpMid }; t.sendCandidateMessage(i) } }, this.localPeerConnection.oniceconnectionstatechange = function (t) { console.log("iceconnectionstatechange: ", t) }, this.localPeerConnection.onaddstream = function (e) { console.log("Remote stream added."), t.remoteVideo.srcObject = e.stream, t.remoteVideo.play() }, this.localPeerConnection.onremovestream = function (t) { console.log("Remote stream removed. Event: ", t) }, console.log("Created RTCPeerConnnection"), this.localPeerConnection.addStream(this.localStream) } catch (t) { console.log("Failed to create PeerConnection, exception: " + t.message) } }, onReceiveSdp: function (t) { var e = this; this.printLog("localPeerConnection setRemoteDescription start."), this.localPeerConnection.setRemoteDescription(t).then(function () { }).catch(e.setSessionDescriptionError), this.printLog("localPeerConnection createAnswer start."), this.localPeerConnection.createAnswer().then(e.createdAnswer).catch(e.setSessionDescriptionError) }, createdAnswer: function (t) { this.printLog("Answer from localPeerConnection:\n" + t.sdp + "."), this.printLog("localPeerConnection setLocalDescription start."); var e = this; this.localPeerConnection.setLocalDescription(t).then(function () { e.sendAnswerMessage(t) }).catch(e.setSessionDescriptionError) }, hangupAction: function () { this.localStream && (this.localStream.getAudioTracks()[0].stop(), this.localStream.getVideoTracks()[0].stop()), this.localPeerConnection && (this.localPeerConnection.close(), this.localPeerConnection = null), this.printLog("Ending call.") }, initVideo: function () { this.initLocalStream(), this.initRemoteStream() } }, directives: { focus: { inserted: function (t) { t.focus() } } }, created: function () { if (this.workGroupWid = this.getUrlParam("wid"), this.subDomain = this.getUrlParam("sub"), this.type = this.getUrlParam("type"), this.thread.type = this.type.toLowerCase(), this.agentUid = this.getUrlParam("aid"), this.nickname = null === this.getUrlParam("nickname") ? "" : this.getUrlParam("nickname"), this.avatar = null === this.getUrlParam("avatar") ? "" : this.getUrlParam("avatar"), this.postscript = this.getUrlParam("postscript"), this.showScript = "1" === this.getUrlParam("showScript"), this.hideNav = "1" === this.getUrlParam("hidenav"), this.backUrl = null === this.getUrlParam("backurl") || "" === this.getUrlParam("backurl") ? document.referrer : this.getUrlParam("backurl"), this.lang = null === this.getUrlParam("lang") ? "cn" : this.getUrlParam("lang"), this.$i18n.locale = this.lang, this.selfuser = this.getUrlParam("selfuser"), "1" === this.selfuser) if ("1" !== localStorage.bd_kfe_selfuser) localStorage.bd_kfe_selfuser = "1", this.registerUser(); else { this.access_token = localStorage.bd_kfe_access_token, this.uid = localStorage.bd_kfe_uid, this.username = localStorage.bd_kfe_username, this.password = this.username; var t = this.getUrlParam("username"); this.username === t ? null !== this.access_token && void 0 !== this.access_token && "" !== this.access_token ? this.requestThread() : null !== this.username && void 0 !== this.username && "" !== this.username && this.login() : this.registerUser() } else "1" === localStorage.bd_kfe_selfuser ? (localStorage.bd_kfe_selfuser = "0", this.requestUsername()) : (localStorage.bd_kfe_selfuser = "0", this.access_token = localStorage.bd_kfe_access_token, this.uid = localStorage.bd_kfe_uid, this.username = localStorage.bd_kfe_username, this.password = this.username, null !== this.access_token && void 0 !== this.access_token && "" !== this.access_token ? this.requestThread() : null !== this.username && void 0 !== this.username && "" !== this.username ? this.login() : this.requestUsername()) }, mounted: function () { String.prototype.startsWith || (String.prototype.startsWith = function (t, e) { return e = e || 0, this.indexOf(t, e) === e }), String.prototype.includes || (String.prototype.includes = function (t) { var e = !1; return -1 !== this.indexOf(t) && (e = !0), e }), String.prototype.endsWith || (String.prototype.endsWith = function (t) { return -1 !== this.indexOf(t, this.length - t.length) }), this.loadHistoryTimer = setInterval(this.loadMessagesUnread, 5e3), this.sendMessageTimer = setInterval(this.checkTimeoutMessage, 1e3), this.initDragUpload(); var t = this; document.addEventListener("WeixinJSBridgeReady", function () { console.log("WeixinJSBridgeReady"), t.isWeixinBrowser = !0 }, !1), this.initVideo() }, beforeDestroy: function () { clearInterval(this.loadHistoryTimer), clearInterval(this.sendMessageTimer) } });