<?xml version="1.0" encoding="utf-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-latest.xsd">

    <!-- ==========================================
         创建客服统计视图
         Create Service Statistic Views
         Date: 2025-10-10
         ========================================== -->

    <!-- 1. 客服会话统计视图 -->
    <changeSet id="251010-create-view-agent-thread-stats" author="bytedesk">
        <preConditions onFail="MARK_RAN">
            <and>
                <tableExists tableName="bytedesk_service_queue_member"/>
                <tableExists tableName="bytedesk_core_thread"/>
                <not>
                    <viewExists viewName="bytedesk_service_view_agent_thread_stats"/>
                </not>
            </and>
        </preConditions>
        
        <createView viewName="bytedesk_service_view_agent_thread_stats" replaceIfExists="true">
            SELECT 
                JSON_UNQUOTE(JSON_EXTRACT(t.agent, '$.uid')) AS agent_uid,
                qm.org_uid,
                DATE(qm.created_at) AS stat_date,
                HOUR(qm.created_at) AS stat_hour,
                COUNT(*) AS total_threads,
                COUNT(CASE WHEN qm.agent_accepted_at IS NOT NULL THEN 1 END) AS accepted_threads,
                COUNT(CASE WHEN qm.agent_accepted_at IS NULL THEN 1 END) AS abandoned_threads,
                COUNT(CASE WHEN qm.agent_accept_type = 'INVITE' THEN 1 END) AS invited_threads,
                COUNT(CASE WHEN qm.agent_accept_type = 'AUTO' THEN 1 END) AS auto_assigned_threads,
                COUNT(CASE WHEN qm.agent_accept_type = 'MANUAL' THEN 1 END) AS manual_assigned_threads,
                COALESCE(AVG(
                    CASE 
                        WHEN qm.agent_accepted_at IS NOT NULL AND qm.visitor_enqueue_at IS NOT NULL
                        THEN TIMESTAMPDIFF(SECOND, qm.visitor_enqueue_at, qm.agent_accepted_at)
                        WHEN qm.robot_accepted_at IS NOT NULL AND qm.visitor_enqueue_at IS NOT NULL
                        THEN TIMESTAMPDIFF(SECOND, qm.visitor_enqueue_at, qm.robot_accepted_at)
                    END
                ), 0) AS avg_wait_time,
                COALESCE(MAX(
                    CASE 
                        WHEN qm.agent_accepted_at IS NOT NULL AND qm.visitor_enqueue_at IS NOT NULL
                        THEN TIMESTAMPDIFF(SECOND, qm.visitor_enqueue_at, qm.agent_accepted_at)
                        WHEN qm.robot_accepted_at IS NOT NULL AND qm.visitor_enqueue_at IS NOT NULL
                        THEN TIMESTAMPDIFF(SECOND, qm.visitor_enqueue_at, qm.robot_accepted_at)
                    END
                ), 0) AS max_wait_time,
                COALESCE(MIN(
                    CASE 
                        WHEN qm.agent_accepted_at IS NOT NULL AND qm.visitor_enqueue_at IS NOT NULL
                        THEN TIMESTAMPDIFF(SECOND, qm.visitor_enqueue_at, qm.agent_accepted_at)
                        WHEN qm.robot_accepted_at IS NOT NULL AND qm.visitor_enqueue_at IS NOT NULL
                        THEN TIMESTAMPDIFF(SECOND, qm.visitor_enqueue_at, qm.robot_accepted_at)
                    END
                ), 0) AS min_wait_time,
                COALESCE(AVG(qm.agent_avg_response_length), 0) AS avg_response_time,
                COALESCE(MAX(qm.agent_max_response_length), 0) AS max_response_time,
                COALESCE(AVG(
                    CASE 
                        WHEN qm.agent_first_response_at IS NOT NULL AND qm.agent_accepted_at IS NOT NULL
                        THEN TIMESTAMPDIFF(SECOND, qm.agent_accepted_at, qm.agent_first_response_at)
                    END
                ), 0) AS avg_first_response_time,
                COALESCE(AVG(
                    CASE 
                        WHEN qm.agent_closed_at IS NOT NULL AND qm.agent_accepted_at IS NOT NULL
                        THEN TIMESTAMPDIFF(SECOND, qm.agent_accepted_at, qm.agent_closed_at)
                    END
                ), 0) AS avg_conversation_time,
                COALESCE(SUM(qm.agent_message_count), 0) AS total_agent_messages,
                COALESCE(SUM(qm.visitor_message_count), 0) AS total_visitor_messages,
                COALESCE(AVG(qm.agent_message_count + qm.visitor_message_count), 0) AS avg_messages_per_thread,
                COUNT(CASE WHEN qm.is_resolved = 1 THEN 1 END) AS first_solved_count,
                NOW() AS view_updated_at
            FROM bytedesk_service_queue_member qm
            INNER JOIN bytedesk_core_thread t ON qm.thread_id = t.id
            WHERE qm.is_deleted = 0
              AND t.agent IS NOT NULL 
              AND t.agent != ''
              AND JSON_EXTRACT(t.agent, '$.uid') IS NOT NULL
            GROUP BY 
                JSON_UNQUOTE(JSON_EXTRACT(t.agent, '$.uid')),
                qm.org_uid,
                DATE(qm.created_at),
                HOUR(qm.created_at)
        </createView>
        
        <rollback>
            <dropView viewName="bytedesk_service_view_agent_thread_stats"/>
        </rollback>
    </changeSet>

    <!-- 2. 工作组会话统计视图 -->
    <changeSet id="251010-create-view-workgroup-thread-stats" author="bytedesk">
        <preConditions onFail="MARK_RAN">
            <and>
                <tableExists tableName="bytedesk_service_queue_member"/>
                <not>
                    <viewExists viewName="bytedesk_service_view_workgroup_thread_stats"/>
                </not>
            </and>
        </preConditions>
        
        <createView viewName="bytedesk_service_view_workgroup_thread_stats" replaceIfExists="true">
            SELECT 
                qm.workgroup_queue_id AS workgroup_uid,
                qm.org_uid,
                DATE(qm.created_at) AS stat_date,
                HOUR(qm.created_at) AS stat_hour,
                COUNT(*) AS total_threads,
                COUNT(CASE WHEN qm.agent_accepted_at IS NOT NULL THEN 1 END) AS accepted_threads,
                COUNT(CASE WHEN qm.agent_accept_type = 'AUTO' THEN 1 END) AS auto_assigned_threads,
                COUNT(CASE WHEN qm.agent_accept_type = 'MANUAL' THEN 1 END) AS manual_assigned_threads,
                COUNT(CASE WHEN qm.agent_accept_type = 'INVITE' THEN 1 END) AS invited_threads,
                COALESCE(AVG(
                    CASE 
                        WHEN qm.agent_accepted_at IS NOT NULL AND qm.visitor_enqueue_at IS NOT NULL
                        THEN TIMESTAMPDIFF(SECOND, qm.visitor_enqueue_at, qm.agent_accepted_at)
                    END
                ), 0) AS avg_wait_time,
                COALESCE(MAX(
                    CASE 
                        WHEN qm.agent_accepted_at IS NOT NULL AND qm.visitor_enqueue_at IS NOT NULL
                        THEN TIMESTAMPDIFF(SECOND, qm.visitor_enqueue_at, qm.agent_accepted_at)
                    END
                ), 0) AS max_wait_time,
                COALESCE(AVG(qm.agent_avg_response_length), 0) AS avg_response_time,
                COALESCE(SUM(qm.agent_message_count), 0) AS total_agent_messages,
                COALESCE(SUM(qm.visitor_message_count), 0) AS total_visitor_messages,
                NOW() AS view_updated_at
            FROM bytedesk_service_queue_member qm
            WHERE qm.is_deleted = 0
              AND qm.workgroup_queue_id IS NOT NULL
            GROUP BY 
                qm.workgroup_queue_id,
                qm.org_uid,
                DATE(qm.created_at),
                HOUR(qm.created_at)
        </createView>
        
        <rollback>
            <dropView viewName="bytedesk_service_view_workgroup_thread_stats"/>
        </rollback>
    </changeSet>

    <!-- 3. 客服满意度统计视图 -->
    <changeSet id="251010-create-view-agent-rating-stats" author="bytedesk">
        <preConditions onFail="MARK_RAN">
            <and>
                <tableExists tableName="bytedesk_service_thread_rating"/>
                <tableExists tableName="bytedesk_core_thread"/>
                <not>
                    <viewExists viewName="bytedesk_service_view_agent_rating_stats"/>
                </not>
            </and>
        </preConditions>
        
        <createView viewName="bytedesk_service_view_agent_rating_stats" replaceIfExists="true">
            SELECT 
                JSON_UNQUOTE(JSON_EXTRACT(t.agent, '$.uid')) AS agent_uid,
                tr.org_uid,
                DATE(tr.created_at) AS stat_date,
                COUNT(*) AS total_ratings,
                COUNT(CASE WHEN tr.score >= 4 THEN 1 END) AS satisfied_count,
                COUNT(CASE WHEN tr.score &lt; 4 THEN 1 END) AS unsatisfied_count,
                COUNT(CASE WHEN tr.score = 5 THEN 1 END) AS very_satisfied_count,
                COUNT(CASE WHEN tr.score = 4 THEN 1 END) AS satisfied_4_count,
                COUNT(CASE WHEN tr.score = 3 THEN 1 END) AS neutral_count,
                COUNT(CASE WHEN tr.score = 2 THEN 1 END) AS unsatisfied_2_count,
                COUNT(CASE WHEN tr.score = 1 THEN 1 END) AS very_unsatisfied_count,
                COALESCE(AVG(tr.score), 0) AS avg_rating_score,
                COALESCE(MAX(tr.score), 0) AS max_score,
                COALESCE(MIN(tr.score), 0) AS min_score,
                ROUND(
                    COUNT(CASE WHEN tr.score >= 4 THEN 1 END) * 100.0 / COUNT(*), 
                    2
                ) AS satisfaction_rate,
                NOW() AS view_updated_at
            FROM bytedesk_service_thread_rating tr
            INNER JOIN bytedesk_core_thread t ON tr.thread_id = t.id
            WHERE tr.is_deleted = 0
              AND t.agent IS NOT NULL
              AND t.agent != ''
              AND JSON_EXTRACT(t.agent, '$.uid') IS NOT NULL
            GROUP BY 
                JSON_UNQUOTE(JSON_EXTRACT(t.agent, '$.uid')),
                tr.org_uid,
                DATE(tr.created_at)
        </createView>
        
        <rollback>
            <dropView viewName="bytedesk_service_view_agent_rating_stats"/>
        </rollback>
    </changeSet>

    <!-- 4. 组织级别综合统计视图 -->
    <changeSet id="251010-create-view-org-service-stats" author="bytedesk">
        <preConditions onFail="MARK_RAN">
            <and>
                <tableExists tableName="bytedesk_service_queue_member"/>
                <tableExists tableName="bytedesk_core_thread"/>
                <not>
                    <viewExists viewName="bytedesk_service_view_org_service_stats"/>
                </not>
            </and>
        </preConditions>
        
        <createView viewName="bytedesk_service_view_org_service_stats" replaceIfExists="true">
            SELECT 
                qm.org_uid,
                DATE(qm.created_at) AS stat_date,
                HOUR(qm.created_at) AS stat_hour,
                COUNT(*) AS total_incoming_threads,
                COUNT(CASE WHEN qm.agent_accepted_at IS NOT NULL THEN 1 END) AS accepted_threads,
                COUNT(CASE WHEN qm.agent_accepted_at IS NULL THEN 1 END) AS abandoned_threads,
                COUNT(CASE WHEN qm.is_resolved = 1 THEN 1 END) AS resolved_threads,
                COUNT(CASE WHEN qm.agent_accept_type = 'AUTO' THEN 1 END) AS auto_assigned_count,
                COUNT(CASE WHEN qm.agent_accept_type = 'MANUAL' THEN 1 END) AS manual_assigned_count,
                COUNT(CASE WHEN qm.agent_accept_type = 'INVITE' THEN 1 END) AS invited_count,
                COALESCE(AVG(
                    CASE 
                        WHEN qm.agent_accepted_at IS NOT NULL AND qm.visitor_enqueue_at IS NOT NULL
                        THEN TIMESTAMPDIFF(SECOND, qm.visitor_enqueue_at, qm.agent_accepted_at)
                    END
                ), 0) AS avg_wait_time,
                COALESCE(MAX(
                    CASE 
                        WHEN qm.agent_accepted_at IS NOT NULL AND qm.visitor_enqueue_at IS NOT NULL
                        THEN TIMESTAMPDIFF(SECOND, qm.visitor_enqueue_at, qm.agent_accepted_at)
                    END
                ), 0) AS max_wait_time,
                COALESCE(AVG(
                    CASE 
                        WHEN qm.agent_closed_at IS NOT NULL AND qm.agent_accepted_at IS NOT NULL
                        THEN TIMESTAMPDIFF(SECOND, qm.agent_accepted_at, qm.agent_closed_at)
                    END
                ), 0) AS avg_conversation_time,
                COALESCE(AVG(
                    CASE 
                        WHEN qm.agent_first_response_at IS NOT NULL AND qm.agent_accepted_at IS NOT NULL
                        THEN TIMESTAMPDIFF(SECOND, qm.agent_accepted_at, qm.agent_first_response_at)
                    END
                ), 0) AS avg_first_response_time,
                COALESCE(SUM(qm.agent_message_count), 0) AS total_agent_messages,
                COALESCE(SUM(qm.visitor_message_count), 0) AS total_visitor_messages,
                COUNT(DISTINCT JSON_UNQUOTE(JSON_EXTRACT(t.thread_user, '$.uid'))) AS unique_visitors,
                NOW() AS view_updated_at
            FROM bytedesk_service_queue_member qm
            INNER JOIN bytedesk_core_thread t ON qm.thread_id = t.id
            WHERE qm.is_deleted = 0
            GROUP BY 
                qm.org_uid,
                DATE(qm.created_at),
                HOUR(qm.created_at)
        </createView>
        
        <rollback>
            <dropView viewName="bytedesk_service_view_org_service_stats"/>
        </rollback>
    </changeSet>

    <!-- 5. 转接统计视图 -->
    <changeSet id="251010-create-view-thread-transfer-stats" author="bytedesk">
        <preConditions onFail="MARK_RAN">
            <and>
                <tableExists tableName="bytedesk_service_thread_transfer"/>
                <not>
                    <viewExists viewName="bytedesk_service_view_thread_transfer_stats"/>
                </not>
            </and>
        </preConditions>
        
        <createView viewName="bytedesk_service_view_thread_transfer_stats" replaceIfExists="true">
            SELECT 
                tt.org_uid,
                JSON_UNQUOTE(JSON_EXTRACT(tt.sender, '$.uid')) AS from_agent_uid,
                JSON_UNQUOTE(JSON_EXTRACT(tt.receiver, '$.uid')) AS to_agent_uid,
                DATE(tt.created_at) AS stat_date,
                COUNT(*) AS total_transfers,
                COUNT(CASE WHEN tt.transfer_status = 'TRANSFER_ACCEPTED' THEN 1 END) AS accepted_transfers,
                COUNT(CASE WHEN tt.transfer_status = 'TRANSFER_TIMEOUT' THEN 1 END) AS timeout_transfers,
                COUNT(CASE WHEN tt.transfer_status = 'TRANSFER_REJECTED' THEN 1 END) AS rejected_transfers,
                NOW() AS view_updated_at
            FROM bytedesk_service_thread_transfer tt
            WHERE tt.is_deleted = 0
            GROUP BY 
                tt.org_uid,
                JSON_UNQUOTE(JSON_EXTRACT(tt.sender, '$.uid')),
                JSON_UNQUOTE(JSON_EXTRACT(tt.receiver, '$.uid')),
                DATE(tt.created_at)
        </createView>
        
        <rollback>
            <dropView viewName="bytedesk_service_view_thread_transfer_stats"/>
        </rollback>
    </changeSet>

    <!-- 6. 机器人统计视图 -->
    <changeSet id="251010-create-view-robot-thread-stats" author="bytedesk">
        <preConditions onFail="MARK_RAN">
            <and>
                <tableExists tableName="bytedesk_service_queue_member"/>
                <not>
                    <viewExists viewName="bytedesk_service_view_robot_thread_stats"/>
                </not>
            </and>
        </preConditions>
        
        <createView viewName="bytedesk_service_view_robot_thread_stats" replaceIfExists="true">
            SELECT 
                qm.robot_queue_id AS robot_uid,
                qm.org_uid,
                DATE(qm.created_at) AS stat_date,
                HOUR(qm.created_at) AS stat_hour,
                COUNT(*) AS robot_thread_count,
                COUNT(CASE WHEN qm.agent_accepted_at IS NOT NULL THEN 1 END) AS robot_to_human_count,
                COUNT(CASE WHEN qm.agent_accepted_at IS NULL THEN 1 END) AS robot_solved_count,
                ROUND(
                    COUNT(CASE WHEN qm.agent_accepted_at IS NULL THEN 1 END) * 100.0 / COUNT(*),
                    2
                ) AS robot_solve_rate,
                COALESCE(SUM(qm.visitor_message_count), 0) AS total_visitor_messages,
                COALESCE(AVG(qm.visitor_message_count), 0) AS avg_messages_per_thread,
                NOW() AS view_updated_at
            FROM bytedesk_service_queue_member qm
            WHERE qm.is_deleted = 0
              AND qm.robot_queue_id IS NOT NULL
            GROUP BY 
                qm.robot_queue_id,
                qm.org_uid,
                DATE(qm.created_at),
                HOUR(qm.created_at)
        </createView>
        
        <rollback>
            <dropView viewName="bytedesk_service_view_robot_thread_stats"/>
        </rollback>
    </changeSet>

</databaseChangeLog>
